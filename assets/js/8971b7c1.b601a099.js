"use strict";(self.webpackChunkdocumentations=self.webpackChunkdocumentations||[]).push([[2885],{9613:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return d}});var r=t(9496);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),m=s(t),d=o,f=m["".concat(c,".").concat(d)]||m[d]||l[d]||a;return t?r.createElement(f,i(i({ref:n},u),{},{components:t})):r.createElement(f,i({ref:n},u))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var p={};for(var c in n)hasOwnProperty.call(n,c)&&(p[c]=n[c]);p.originalType=e,p.mdxType="string"==typeof e?e:o,i[1]=p;for(var s=2;s<a;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7694:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return p},metadata:function(){return s},toc:function(){return l}});var r=t(5443),o=t(3010),a=(t(9496),t(9613)),i=["components"],p={id:"convert-using",title:"ConvertUsing",sidebar_label:"ConvertUsing",sidebar_position:7},c=void 0,s={unversionedId:"mapping-configuration/for-member/convert-using",id:"mapping-configuration/for-member/convert-using",title:"ConvertUsing",description:"Call convertUsing() and pass in a Converter to map the configured property with the Converter#convert method.",source:"@site/docs/mapping-configuration/for-member/convert-using.mdx",sourceDirName:"mapping-configuration/for-member",slug:"/mapping-configuration/for-member/convert-using",permalink:"/docs/mapping-configuration/for-member/convert-using",draft:!1,editUrl:"https://github.com/nartc/mapper/tree/main/packages/documentations/docs/mapping-configuration/for-member/convert-using.mdx",tags:[],version:"current",lastUpdatedBy:"Chau Tran",lastUpdatedAt:1648507459,formattedLastUpdatedAt:"3/28/2022",sidebarPosition:7,frontMatter:{id:"convert-using",title:"ConvertUsing",sidebar_label:"ConvertUsing",sidebar_position:7},sidebar:"docs",previous:{title:"MapWith",permalink:"/docs/mapping-configuration/for-member/map-with"},next:{title:"NullSubstitution",permalink:"/docs/mapping-configuration/for-member/null-substitution"}},u={},l=[],m={toc:l};function d(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Call ",(0,a.kt)("inlineCode",{parentName:"p"},"convertUsing()")," and pass in a ",(0,a.kt)("inlineCode",{parentName:"p"},"Converter")," to map the configured property with the ",(0,a.kt)("inlineCode",{parentName:"p"},"Converter#convert")," method."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export interface Converter<TheSource, TheResult> {\n    convert(source: TheSource): TheResult;\n}\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Converter")," can be used to extract common logic where we want to map one data type to another. ",(0,a.kt)("inlineCode",{parentName:"p"},"Converter")," can be reused across different Mappings in the application. For example, we might have a ",(0,a.kt)("inlineCode",{parentName:"p"},"dateToStringConverter")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export const dateToStringConverter: Converter<Date, string> = {\n    convert(source) {\n        // maybe handle validation, additional parsing, or format here\n        return source.toDateString();\n    },\n};\n\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    forMember(\n        (destination) => destination.birthday,\n        convertUsing(dateToStringConverter, (source) => source.birthday)\n    )\n);\n")),(0,a.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"If we have simple logic, we can use ",(0,a.kt)("a",{parentName:"p",href:"../type-converters"},"Type Converter")," to also map from one data type to another on the Mapping level instead of ",(0,a.kt)("inlineCode",{parentName:"p"},"convertUsing")," on the property level."))),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"convertUsing()")," sets the ",(0,a.kt)("inlineCode",{parentName:"p"},"TransformationType")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"TransformationType.ConvertUsing")))}d.isMDXComponent=!0}}]);