"use strict";(self.webpackChunkdocumentations=self.webpackChunkdocumentations||[]).push([[2433],{9613:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return d}});var a=n(9496);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),m=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=m(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=m(n),d=r,f=u["".concat(l,".").concat(d)]||u[d]||c[d]||o;return n?a.createElement(f,i(i({ref:t},s),{},{components:n})):a.createElement(f,i({ref:t},s))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var m=2;m<o;m++)i[m]=n[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3897:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return p},metadata:function(){return m},toc:function(){return c}});var a=n(5443),r=n(3010),o=(n(9496),n(9613)),i=["components"],p={id:"for-self",title:"ForSelf",sidebar_label:"ForSelf",sidebar_position:7},l=void 0,m={unversionedId:"mapping-configuration/for-self",id:"mapping-configuration/for-self",title:"ForSelf",description:"In previous sections, we've learned that we can have Auto Flattening with Naming Conventions.",source:"@site/docs/mapping-configuration/for-self.mdx",sourceDirName:"mapping-configuration",slug:"/mapping-configuration/for-self",permalink:"/docs/mapping-configuration/for-self",draft:!1,editUrl:"https://github.com/nartc/mapper/tree/main/packages/documentations/docs/mapping-configuration/for-self.mdx",tags:[],version:"current",lastUpdatedBy:"Chau Tran",lastUpdatedAt:1648447590,formattedLastUpdatedAt:"3/28/2022",sidebarPosition:7,frontMatter:{id:"for-self",title:"ForSelf",sidebar_label:"ForSelf",sidebar_position:7},sidebar:"docs",previous:{title:"MapDefer",permalink:"/docs/mapping-configuration/for-member/map-defer"},next:{title:"NamingConventions",permalink:"/docs/mapping-configuration/naming-conventions"}},s={},c=[],u={toc:c};function d(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"In previous sections, we've learned that we can have ",(0,o.kt)("a",{parentName:"p",href:"../fundamentals/auto-flattening"},"Auto Flattening")," with ",(0,o.kt)("a",{parentName:"p",href:"../fundamentals/naming-convention"},"Naming Conventions"),"."),(0,o.kt)("p",null,"Let's assume we have the following models"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"class Item {\n    @AutoMap()\n    name: string;\n    @AutoMap()\n    price: number;\n    @AutoMap()\n    stock: number;\n}\n\nclass CartItem {\n    @AutoMap(() => Item)\n    item: Item;\n    @AutoMap()\n    quantity: number;\n}\n\nclass CartItemDto {\n    @AutoMap()\n    itemName: string;\n    @AutoMap()\n    itemPrice: number;\n    @AutoMap()\n    quantity: number;\n\n    get total() {\n        return this.price * this.quantity;\n    }\n}\n")),(0,o.kt)("p",null,"From ",(0,o.kt)("a",{parentName:"p",href:"../fundamentals/auto-flattening"},"Auto Flattening")," documentation, we know that ",(0,o.kt)("inlineCode",{parentName:"p"},"CartItemDto.itemName")," will be mapped automatically from ",(0,o.kt)("inlineCode",{parentName:"p"},"CartItem.item.name")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"CartItemDto.itemPrice")," will be mapped automatically from ",(0,o.kt)("inlineCode",{parentName:"p"},"CartItem.item.price"),"."),(0,o.kt)("p",null,"While that works, we want to keep out DTOs cleaner sometimes without having to prefix some fields to achieve Auto Flattening. Let's adjust our models a little"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"class Item {\n    @AutoMap()\n    name: string;\n    @AutoMap()\n    price: number;\n    @AutoMap()\n    stock: number;\n}\n\nclass CartItem {\n    @AutoMap(() => Item)\n    item: Item;\n    @AutoMap()\n    quantity: number;\n}\n\nclass CartItemDto {\n    // highlight-start\n    @AutoMap()\n    name: string;\n    @AutoMap()\n    price: number;\n    // highlight-end\n    @AutoMap()\n    quantity: number;\n\n    get total() {\n        return this.price * this.quantity;\n    }\n}\n")),(0,o.kt)("p",null,"There are two approaches we can go about this"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Use ",(0,o.kt)("inlineCode",{parentName:"li"},"forMember()")," explicitly")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"createMap(\n    mapper,\n    CartItem,\n    CartItemDto,\n    forMember(\n        (destination) => destination.name,\n        mapFrom((source) => source.item.name)\n    ),\n    forMember(\n        (destination) => destination.price,\n        mapFrom((source) => source.item.price)\n    )\n);\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Use ",(0,o.kt)("inlineCode",{parentName:"li"},"forSelf()"))),(0,o.kt)("p",null,"Call ",(0,o.kt)("inlineCode",{parentName:"p"},"forSelf()")," and pass in the nested model so AutoMapper will map the matching properties between the ",(0,o.kt)("inlineCode",{parentName:"p"},"Destination")," and that nested model. In other words, AutoMapper creates a Mapping between the nested model and ",(0,o.kt)("inlineCode",{parentName:"p"},"Destination")," then have the original Mapping extend it. The second argument lets AutoMapper knows where to find the data whose value is of type nested model."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"createMap(\n    mapper,\n    CartItem,\n    CartItemDto,\n    forSelf(Item, (source) => source.item)\n);\n")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},(0,o.kt)("inlineCode",{parentName:"p"},"forSelf()")," also accepts a ",(0,o.kt)("inlineCode",{parentName:"p"},"Mapping")," instead of just the nested model."),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const mapping = createMap(mapper, Item, CartItemDto);\ncreateMap(\n    mapper,\n    CartItem,\n    CartItemDto,\n    forSelf(mapping, (source) => source.item)\n);\n")))))}d.isMDXComponent=!0}}]);