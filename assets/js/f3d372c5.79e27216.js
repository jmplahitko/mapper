"use strict";(self.webpackChunkdocumentations=self.webpackChunkdocumentations||[]).push([[3192],{9613:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return c}});var a=n(9496);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),m=s(n),c=r,f=m["".concat(l,".").concat(c)]||m[c]||u[c]||o;return n?a.createElement(f,i(i({ref:t},d),{},{components:n})):a.createElement(f,i({ref:t},d))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2990:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return l},default:function(){return c},frontMatter:function(){return p},metadata:function(){return s},toc:function(){return u}});var a=n(5443),r=n(3010),o=(n(9496),n(9613)),i=["components"],p={id:"overview",title:"Overview",sidebar_label:"Overview",sidebar_position:1},l=void 0,s={unversionedId:"mapping-configuration/overview",id:"mapping-configuration/overview",title:"Overview",description:"Convention over Configuration",source:"@site/docs/mapping-configuration/overview.mdx",sourceDirName:"mapping-configuration",slug:"/mapping-configuration/overview",permalink:"/docs/mapping-configuration/overview",draft:!1,editUrl:"https://github.com/nartc/mapper/tree/main/packages/documentations/docs/mapping-configuration/overview.mdx",tags:[],version:"current",lastUpdatedBy:"Chau Tran",lastUpdatedAt:1648359081,formattedLastUpdatedAt:"3/27/2022",sidebarPosition:1,frontMatter:{id:"overview",title:"Overview",sidebar_label:"Overview",sidebar_position:1},sidebar:"docs",previous:{title:"Mutation",permalink:"/docs/fundamentals/mutation"},next:{title:"AfterMap",permalink:"/docs/mapping-configuration/after-map"}},d={},u=[{value:"Convention over Configuration",id:"convention-over-configuration",level:2},{value:"Custom Configuration",id:"custom-configuration",level:2}],m={toc:u};function c(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"convention-over-configuration"},"Convention over Configuration"),(0,o.kt)("p",null,"AutoMapper does have ",(0,o.kt)("em",{parentName:"p"},"Auto")," in its name. If we follow closely ",(0,o.kt)("em",{parentName:"p"},"Conventions"),", we rarely need ",(0,o.kt)("inlineCode",{parentName:"p"},"MappingConfiguration"),"."),(0,o.kt)("p",null,"As we have already seen in previous examples, matching properties are mapped automatically as long as the metadata is provided."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"class User {\n    @AutoMap()\n    firstName!: string;\n    @AutoMap()\n    lastName!: string;\n}\n\nclass UserDto {\n    @AutoMap()\n    firstName!: string;\n    @AutoMap()\n    lastName!: string;\n}\n")),(0,o.kt)("p",null,"Nested models are also ",(0,o.kt)("em",{parentName:"p"},"auto-mapped"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"class Address {\n    @AutoMap()\n    street!: string;\n}\n\nclass Bio {\n    @AutoMap()\n    text!: string;\n    @AutoMap(() => [Address])\n    addresses: Address[] = [];\n}\n\nclass User {\n    @AutoMap(() => Bio)\n    bio!: Bio;\n}\n\nclass AddressDto {\n    @AutoMap()\n    street!: string;\n}\n\nclass BioDto {\n    @AutoMap()\n    text!: string;\n    @AutoMap(() => [AddressDto])\n    addresses: AddressDto[] = [];\n}\n\nclass UserDto {\n    @AutoMap(() => BioDto)\n    bio!: BioDto;\n}\n")),(0,o.kt)("p",null,"In addition, there is ",(0,o.kt)("a",{parentName:"p",href:"../fundamentals/auto-flattening"},"Auto Flattening"),". These features should encourage us to stay as close to the conventions as possible."),(0,o.kt)("h2",{id:"custom-configuration"},"Custom Configuration"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"MappingConfiguration")," are functions that augment a ",(0,o.kt)("inlineCode",{parentName:"p"},"Mapping"),". When creating a ",(0,o.kt)("inlineCode",{parentName:"p"},"Mapping")," with ",(0,o.kt)("inlineCode",{parentName:"p"},"createMap()"),", we can pass in as many ",(0,o.kt)("inlineCode",{parentName:"p"},"MappingConfiguration")," as we like and in any order that we want."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"mapping configuration"),(0,o.kt)("th",{parentName:"tr",align:null},"description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"afterMap()")),(0,o.kt)("td",{parentName:"tr",align:null},"Attach a ",(0,o.kt)("inlineCode",{parentName:"td"},"MapCallback")," to run after the map operation")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"beforeMap()")),(0,o.kt)("td",{parentName:"tr",align:null},"Attach a ",(0,o.kt)("inlineCode",{parentName:"td"},"MapCallback")," to run before the map operation")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"constructUsing()")),(0,o.kt)("td",{parentName:"tr",align:null},"Set a custom constructor for the ",(0,o.kt)("inlineCode",{parentName:"td"},"Destination")," before the map operation")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"extend()")),(0,o.kt)("td",{parentName:"tr",align:null},"Extend another ",(0,o.kt)("inlineCode",{parentName:"td"},"Mapping"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"forMember()")),(0,o.kt)("td",{parentName:"tr",align:null},"Configure a ",(0,o.kt)("inlineCode",{parentName:"td"},"MappingTransformation")," for a property on the ",(0,o.kt)("inlineCode",{parentName:"td"},"Destination"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"forSelf()")),(0,o.kt)("td",{parentName:"tr",align:null},"Configure flattening for ",(0,o.kt)("inlineCode",{parentName:"td"},"Destination")," from a different ",(0,o.kt)("inlineCode",{parentName:"td"},"Source"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"namingConventions()")),(0,o.kt)("td",{parentName:"tr",align:null},"Configure the ",(0,o.kt)("inlineCode",{parentName:"td"},"NamingConvention")," for this ",(0,o.kt)("inlineCode",{parentName:"td"},"Mapping"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"typeConverters()")),(0,o.kt)("td",{parentName:"tr",align:null},"Configure the ",(0,o.kt)("inlineCode",{parentName:"td"},"TypeConverter")," for this ",(0,o.kt)("inlineCode",{parentName:"td"},"Mapping"))))),(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"If the Mapping have an absurd amount of custom ",(0,o.kt)("inlineCode",{parentName:"p"},"MappingConfiguration"),", it's time to re-evaluate the models or if AutoMapper is the right tool for the project."))))}c.isMDXComponent=!0}}]);