"use strict";(self.webpackChunkdocumentations=self.webpackChunkdocumentations||[]).push([[9510],{9613:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return m}});var n=a(9496);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),l=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},c=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=l(a),m=r,f=d["".concat(p,".").concat(m)]||d[m]||u[m]||o;return a?n.createElement(f,s(s({ref:t},c),{},{components:a})):n.createElement(f,s({ref:t},c))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var l=2;l<o;l++)s[l]=a[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},2319:function(e,t,a){a.r(t),a.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return u}});var n=a(5443),r=a(3010),o=(a(9496),a(9613)),s=["components"],i={id:"index",title:"@automapper/classes",slug:"/api/classes/",sidebar_label:"README",sidebar_position:0,custom_edit_url:null},p="@automapper/classes",l={unversionedId:"api/classes/index",id:"api/classes/index",title:"@automapper/classes",description:"This is the official strategy from @automapper to work with TS/ES6 Class",source:"@site/docs/api/classes/index.md",sourceDirName:"api/classes",slug:"/api/classes/",permalink:"/docs/api/classes/",draft:!1,editUrl:null,tags:[],version:"current",lastUpdatedBy:"Chau Tran",lastUpdatedAt:1648568774,formattedLastUpdatedAt:"3/29/2022",sidebarPosition:0,frontMatter:{id:"index",title:"@automapper/classes",slug:"/api/classes/",sidebar_label:"README",sidebar_position:0,custom_edit_url:null},sidebar:"api",previous:{title:"TransformerMetadataFactory",permalink:"/docs/api/core/interfaces/TransformerMetadataFactory"},next:{title:"Exports",permalink:"/docs/api/classes/modules"}},c={},u=[{value:"Installation",id:"installation",level:2},{value:"<code>peerDependencies</code>",id:"peerdependencies",level:3},{value:"Usage",id:"usage",level:2},{value:"Customization",id:"customization",level:2}],d={toc:u};function m(e){var t=e.components,a=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"automapperclasses"},"@automapper/classes"),(0,o.kt)("p",null,"This is the official strategy from ",(0,o.kt)("inlineCode",{parentName:"p"},"@automapper")," to work with TS/ES6 Class"),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"npm i @automapper/classes\n")),(0,o.kt)("p",null,"or with ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"yarn add @automapper/classes\n")),(0,o.kt)("h3",{id:"peerdependencies"},(0,o.kt)("inlineCode",{parentName:"h3"},"peerDependencies")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@automapper/classes")," depends on ",(0,o.kt)("inlineCode",{parentName:"p"},"@automapper/core")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"reflect-metadata"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"npm i @automapper/core reflect-metadata\n")),(0,o.kt)("p",null,"or with ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"yarn add @automapper/core reflect-metadata\n")),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@automapper/classes")," provides ",(0,o.kt)("inlineCode",{parentName:"p"},"classes")," as a ",(0,o.kt)("inlineCode",{parentName:"p"},"MappingStrategyInitializer"),". Pass ",(0,o.kt)("inlineCode",{parentName:"p"},"classes()")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"createMapper")," to create\na ",(0,o.kt)("inlineCode",{parentName:"p"},"Mapper")," that uses ",(0,o.kt)("inlineCode",{parentName:"p"},"classes")," strategy."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { classes, AutoMap } from '@automapper/classes';\nimport { createMapper, createMap, forMember, mapFrom } from '@automapper/core';\n\nconst mapper = createMapper({\n  ...,\n  strategyInitializer: classes()\n});\n\nclass User {\n    @AutoMap()\n    firstName: string;\n    @AutoMap()\n    lastName: string;\n\n    constructor(firstName: string, lastName: string) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n    }\n}\n\nclass UserDto {\n  @AutoMap()\n  firstName: string;\n  @AutoMap()\n  lastName: string;\n  @AutoMap()\n  fullName: string;\n}\n\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    forMember(\n        d => d.fullName,\n        mapFrom(s => s.firstName + ' ' + s.lastName)\n    )\n);\nmapper.map(new User('Auto', 'Mapper'), User, UserDto);\n// UserDto { firstName: 'Auto', lastName: 'Mapper', fullName: 'Auto Mapper' }\n")),(0,o.kt)("h2",{id:"customization"},"Customization"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"classes()")," accepts two optional parameters:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"destinationConstructor"),": how to construct the ",(0,o.kt)("inlineCode",{parentName:"p"},"Destination"),". This is the default ",(0,o.kt)("inlineCode",{parentName:"p"},"destinationConstructor")," that will be used on ",(0,o.kt)("inlineCode",{parentName:"p"},"mapper.mapXXXX()")," operations. ",(0,o.kt)("inlineCode",{parentName:"p"},"DestinationConstructor")," is a function with the following signature:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'export type DestinationConstructor<\n    TSource extends Dictionary<TSource> = any,\n    TDestination extends Dictionary<TDestination> = any\n> = (\n    sourceObject: TSource, // the sourceObject used to map to the Destination\n    destinationIdentifier: MetadataIdentifier<TDestination> // the Destination model\n) => TDestination;\n\n// example\nmapper.map(user, User, UserDto);\n// sourceObject will be "user"\n// destinationIdentifier will be "UserDto"\n// This allows you to provide a default constructor that can be based on the Source object data\n')),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"There is a way to provide one-off custom ",(0,o.kt)("inlineCode",{parentName:"li"},"destinationConstructor")," to any given ",(0,o.kt)("inlineCode",{parentName:"li"},"Mapping")," when you run ",(0,o.kt)("inlineCode",{parentName:"li"},"createMap"),". Read more about ",(0,o.kt)("a",{parentName:"li",href:"https://automapperts.netlify.app/docs/plugins-system/introduce-to-classes"},"constructUsing")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"applyMetadata"),": how the strategy should apply the metadata to a model. The default should work for most cases but if you would like to customize this, you can. ",(0,o.kt)("inlineCode",{parentName:"p"},"ApplyMetadata")," is a function with the following signature:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export type ApplyMetadataFn = <TModel extends Dictionary<TModel>>(\n    model: MetadataIdentifier<TModel>\n) => TModel;\n\nexport type ApplyMetadata = (\n    strategy: MappingStrategy<MetadataIdentifier>\n) => ApplyMetadataFn;\n\n// for example\nconst customApplyMetadata: ApplyMetadata = (strategy: MappingStrategy) => {\n    // strategy contains the Mapper which stores all the models' metadata\n    return (model) => {\n        // based on this model, you can extract the metadata and do as you like\n\n        return anObjectThatHasTheMetadataApplied; // { foo: undefined, bar: undefined }\n    };\n};\n")))),(0,o.kt)("p",null,"Read more about this strategy on ",(0,o.kt)("a",{parentName:"p",href:"https://automapperts.netlify.app/docs/plugins-system/introduce-to-classes"},"classes documentation")))}m.isMDXComponent=!0}}]);