"use strict";(self.webpackChunkdocumentations=self.webpackChunkdocumentations||[]).push([[2425],{9613:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return d}});var r=n(9496);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),m=l(n),d=o,f=m["".concat(c,".").concat(d)]||m[d]||p[d]||a;return n?r.createElement(f,i(i({ref:t},s),{},{components:n})):r.createElement(f,i({ref:t},s))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var u={};for(var c in t)hasOwnProperty.call(t,c)&&(u[c]=t[c]);u.originalType=e,u.mdxType="string"==typeof e?e:o,i[1]=u;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4551:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return u},metadata:function(){return l},toc:function(){return p}});var r=n(5443),o=n(3010),a=(n(9496),n(9613)),i=["components"],u={id:"auto-flattening",title:"Auto Flattening",sidebar_label:"Auto Flattening",sidebar_position:4},c=void 0,l={unversionedId:"fundamentals/auto-flattening",id:"fundamentals/auto-flattening",title:"Auto Flattening",description:"One of the common usages of object-object mapping is to take a complex object model and flatten it to a simpler model. If we set up the models following the convention, AutoMapper can help with flattening automatically. To enable Auto Flattening, we need to set the NamingConvention for our models.",source:"@site/docs/fundamentals/auto-flattening.mdx",sourceDirName:"fundamentals",slug:"/fundamentals/auto-flattening",permalink:"/docs/fundamentals/auto-flattening",draft:!1,editUrl:"https://github.com/nartc/mapper/tree/main/packages/documentations/docs/fundamentals/auto-flattening.mdx",tags:[],version:"current",lastUpdatedBy:"Chau Tran",lastUpdatedAt:1648359081,formattedLastUpdatedAt:"3/27/2022",sidebarPosition:4,frontMatter:{id:"auto-flattening",title:"Auto Flattening",sidebar_label:"Auto Flattening",sidebar_position:4},sidebar:"docs",previous:{title:"Naming Conventions",permalink:"/docs/fundamentals/naming-convention"},next:{title:"Mutation",permalink:"/docs/fundamentals/mutation"}},s={},p=[],m={toc:p};function d(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"One of the common usages of object-object mapping is to take a complex object model and flatten it to a simpler model. If we set up the models following the convention, AutoMapper can help with flattening automatically. To enable Auto Flattening, we need to set the ",(0,a.kt)("a",{parentName:"p",href:"./naming-convention"},"NamingConvention")," for our models."),(0,a.kt)("p",null,"Let's assume we have the following complex models:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"class Product {\n    @AutoMap()\n    price!: number;\n    @AutoMap()\n    name!: string;\n\n    constructor(price: number, name: string) {\n        this.price = price;\n        this.name = name;\n    }\n}\n\nclass Customer {\n    @AutoMap()\n    name!: string;\n\n    constructor(name: string) {\n        this.name = name;\n    }\n}\n\nclass OrderItem {\n    @AutoMap(() => Product)\n    product!: Product;\n    @AutoMap()\n    quantity!: number;\n\n    constructor(product: Product, quantity: number) {\n        this.product = product;\n        this.quantity = quantity;\n    }\n\n    get total() {\n        return this.product.price * this.quantity;\n    }\n}\n\nclass Order {\n    @AutoMap(() => [OrderItem])\n    items: OrderItem[] = [];\n    @AutoMap(() => Customer)\n    customer!: Customer;\n\n    constructor(customer: Customer) {\n        this.customer = customer;\n    }\n\n    @AutoMap() // \ud83d\udc47 need to specify the type for getter\n    get total(): number {\n        return this.items.reduce((sum, item) => sum + item.total, 0);\n    }\n\n    addItem(product: Product, quantity: number) {\n        this.items.push(new OrderItem(product, quantity));\n    }\n}\n")),(0,a.kt)("p",null,"Now, we want to map the complex ",(0,a.kt)("inlineCode",{parentName:"p"},"Order")," model to a simpler ",(0,a.kt)("inlineCode",{parentName:"p"},"OrderDto")," that contains only the data needed for a certain scenario:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"class OrderDto {\n    @AutoMap()\n    customerName!: string;\n    @AutoMap()\n    total!: number;\n}\n")),(0,a.kt)("p",null,"Assuming we have Auto Flattening enabled by applying a ",(0,a.kt)("inlineCode",{parentName:"p"},"NamingConvention"),", AutoMapper will attempt to match the properties on ",(0,a.kt)("inlineCode",{parentName:"p"},"OrderDto")," against ",(0,a.kt)("inlineCode",{parentName:"p"},"Order")," and its child models (",(0,a.kt)("inlineCode",{parentName:"p"},"Product")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Customer"),") when we call ",(0,a.kt)("inlineCode",{parentName:"p"},"createMap(mapper, Order, OrderDto)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// complex model\nconst product = new Product(5, 'Fried Chicken');\nconst customer = new Customer('Chau Tran');\nconst order = new Order(customer);\norder.addItem(product, 10);\n/**\n * Order {\n *     customer: Customer {\n *         name: 'Chau Tran'\n *     },\n *     items: [\n *         OrderItem {\n *             product: Product {\n *                 price: 5,\n *                 name: 'Fried Chicken\n *             },\n *             quantity: 10\n *         }\n *     ]\n * }\n */\n\n// configure AutoMapper with NamingConvention\nconst mapper = createMapper({\n    strategyInitializer: classes(),\n    // \ud83d\udc47 apply the CamelCaseNamingConvention\n    namingConventions: new CamelCaseNamingConvention(),\n});\n\ncreateMap(mapper, Order, OrderDto);\n\nconst dto = mapper.map(order, Order, OrderDto);\n/**\n * OrderDto {\n *     customerName: 'Chau Tran',\n *     total: 50\n * }\n */\n")))}d.isMDXComponent=!0}}]);