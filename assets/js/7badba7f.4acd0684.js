"use strict";(self.webpackChunkdocumentations=self.webpackChunkdocumentations||[]).push([[590],{9613:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var a=n(9496);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(n),d=r,f=c["".concat(p,".").concat(d)]||c[d]||m[d]||o;return n?a.createElement(f,i(i({ref:t},u),{},{components:n})):a.createElement(f,i({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},8597:function(e,t,n){n.d(t,{Z:function(){return i}});var a=n(9496),r=n(1626),o="tabItem_zeWL";function i(e){var t=e.children,n=e.hidden,i=e.className;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,i),hidden:n},t)}},109:function(e,t,n){n.d(t,{Z:function(){return d}});var a=n(5443),r=n(9496),o=n(1626),i=n(5230),l=n(1339),p=n(3601),s=n(7288),u="tabList_gs2P",m="tabItem_Ugfh";function c(e){var t,n,i=e.lazy,c=e.block,d=e.defaultValue,f=e.values,g=e.groupId,v=e.className,b=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),N=null!=f?f:b.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),h=(0,l.l)(N,(function(e,t){return e.value===t.value}));if(h.length>0)throw new Error('Docusaurus error: Duplicate values "'+h.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var k=null===d?d:null!=(t=null!=d?d:null==(n=b.find((function(e){return e.props.default})))?void 0:n.props.value)?t:b[0].props.value;if(null!==k&&!N.some((function(e){return e.value===k})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+N.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var y=(0,p.U)(),C=y.tabGroupChoices,w=y.setTabGroupChoices,M=(0,r.useState)(k),T=M[0],D=M[1],x=[],j=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=g){var A=C[g];null!=A&&A!==T&&N.some((function(e){return e.value===A}))&&D(A)}var O=function(e){var t=e.currentTarget,n=x.indexOf(t),a=N[n].value;a!==T&&(j(t),D(a),null!=g&&w(g,String(a)))},U=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a,r=x.indexOf(e.currentTarget)+1;n=null!=(a=x[r])?a:x[0];break;case"ArrowLeft":var o,i=x.indexOf(e.currentTarget)-1;n=null!=(o=x[i])?o:x[x.length-1]}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":c},v)},N.map((function(e){var t=e.value,n=e.label,i=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:function(e){return x.push(e)},onKeyDown:U,onFocus:O,onClick:O},i,{className:(0,o.Z)("tabs__item",m,null==i?void 0:i.className,{"tabs__item--active":T===t})}),null!=n?n:t)}))),i?(0,r.cloneElement)(b.filter((function(e){return e.props.value===T}))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},b.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==T})}))))}function d(e){var t=(0,i.Z)();return r.createElement(c,(0,a.Z)({key:String(t)},e))}},4343:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return u},default:function(){return g},frontMatter:function(){return s},metadata:function(){return m},toc:function(){return d}});var a=n(5443),r=n(3010),o=(n(9496),n(9613)),i=n(109),l=n(8597),p=["components"],s={id:"mapping-configurations",title:"Use Mapping Configurations",sidebar_label:"Use Mapping Configurations",sidebar_position:4},u=void 0,m={unversionedId:"tutorial/mapping-configurations",id:"tutorial/mapping-configurations",title:"Use Mapping Configurations",description:"fullName",source:"@site/docs/tutorial/mapping-configurations.mdx",sourceDirName:"tutorial",slug:"/tutorial/mapping-configurations",permalink:"/docs/tutorial/mapping-configurations",draft:!1,editUrl:"https://github.com/nartc/mapper/tree/main/packages/documentations/docs/tutorial/mapping-configurations.mdx",tags:[],version:"current",lastUpdatedBy:"Chau Tran",lastUpdatedAt:1648507459,formattedLastUpdatedAt:"3/28/2022",sidebarPosition:4,frontMatter:{id:"mapping-configurations",title:"Use Mapping Configurations",sidebar_label:"Use Mapping Configurations",sidebar_position:4},sidebar:"docs",previous:{title:"Create Mappings",permalink:"/docs/tutorial/create-mapping"},next:{title:"Group Mapping Logic with Profile",permalink:"/docs/tutorial/mapping-profile"}},c={},d=[{value:"<code>fullName</code>",id:"fullname",level:2},{value:"<code>birthday</code>",id:"birthday",level:2},{value:"<code>jobTitle</code> and <code>jobSalary</code>",id:"jobtitle-and-jobsalary",level:2},{value:"Summary",id:"summary",level:2}],f={toc:d};function g(e){var t=e.components,n=(0,r.Z)(e,p);return(0,o.kt)("wrapper",(0,a.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"fullname"},(0,o.kt)("inlineCode",{parentName:"h2"},"fullName")),(0,o.kt)("p",null,"In this particular case, you can call ",(0,o.kt)("inlineCode",{parentName:"p"},"fullName")," a ",(0,o.kt)("em",{parentName:"p"},"computed")," property because the Source (",(0,o.kt)("inlineCode",{parentName:"p"},"User"),")\ndoes not have a ",(0,o.kt)("inlineCode",{parentName:"p"},"fullName")," property. Hence, it must be computed from something else. To configure the mapping instruction for a property, you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"forMember()")," with ",(0,o.kt)("inlineCode",{parentName:"p"},"createMap()")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { createMap, forMember, mapFrom } from '@automapper/core';\n\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    // highlight-start\n    forMember(\n        (destination) => destination.fullName,\n        mapFrom((source) => source.firstName + ' ' + source.lastName)\n    )\n    // highlight-end\n);\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"forMember()")," accepts two arguments:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A ",(0,o.kt)("inlineCode",{parentName:"li"},"Selector")," to select the property you want to configure the instruction for."),(0,o.kt)("li",{parentName:"ul"},"A ",(0,o.kt)("inlineCode",{parentName:"li"},"MemberMapFn")," that carries a specific instruction.")),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Read more about ",(0,o.kt)("a",{parentName:"p",href:"../mapping-configuration/for-member/overview"},"ForMember")))),(0,o.kt)("p",null,"Here, ",(0,o.kt)("inlineCode",{parentName:"p"},"forMember()")," is saying: For ",(0,o.kt)("inlineCode",{parentName:"p"},"destination.fullName"),", use ",(0,o.kt)("inlineCode",{parentName:"p"},"source.firstName + ' ' + source.lastName")," as the result."),(0,o.kt)("h2",{id:"birthday"},(0,o.kt)("inlineCode",{parentName:"h2"},"birthday")),(0,o.kt)("p",null,"For ",(0,o.kt)("inlineCode",{parentName:"p"},"birthday"),", let's try using another ",(0,o.kt)("inlineCode",{parentName:"p"},"MappingConfiguration")," function: ",(0,o.kt)("inlineCode",{parentName:"p"},"typeConverter"),". Here, we want to convert from ",(0,o.kt)("inlineCode",{parentName:"p"},"Date")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"string"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"createMap(\n    mapper,\n    Bio,\n    BioDto,\n    // highlight-next-line\n    typeConverter(Date, String, (date) => date.toDateString())\n);\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"typeConverter()")," is saying: If a property on the Source is of type ",(0,o.kt)("inlineCode",{parentName:"p"},"Date")," and the matching property on the Destination is of type ",(0,o.kt)("inlineCode",{parentName:"p"},"String"),", use the conversion of ",(0,o.kt)("inlineCode",{parentName:"p"},"date.toDateString()")),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("ul",{parentName:"div"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"typeConverter")," will apply ",(0,o.kt)("inlineCode",{parentName:"li"},"Date -> String")," conversion for ALL pairs of ",(0,o.kt)("inlineCode",{parentName:"li"},"Date, String"),", not just ",(0,o.kt)("inlineCode",{parentName:"li"},"birthday")),(0,o.kt)("li",{parentName:"ul"},"Instead of ",(0,o.kt)("inlineCode",{parentName:"li"},"typeConverter"),", you can also use ",(0,o.kt)("inlineCode",{parentName:"li"},"forMember()")," to map ",(0,o.kt)("inlineCode",{parentName:"li"},"BioDto#birthday")," by itself.")))),(0,o.kt)("h2",{id:"jobtitle-and-jobsalary"},(0,o.kt)("inlineCode",{parentName:"h2"},"jobTitle")," and ",(0,o.kt)("inlineCode",{parentName:"h2"},"jobSalary")),(0,o.kt)("p",null,"These two properties are a bit different from ",(0,o.kt)("inlineCode",{parentName:"p"},"fullName")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"birthday"),". If you notice, you will see that ",(0,o.kt)("inlineCode",{parentName:"p"},"jobTitle")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"jobSalary")," are ",(0,o.kt)("strong",{parentName:"p"},"flatten")," properties of ",(0,o.kt)("inlineCode",{parentName:"p"},"job.title")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"job.salary"),"."),(0,o.kt)("p",null,"AutoMapper supports ",(0,o.kt)("a",{parentName:"p",href:"../fundamentals/auto-flattening"},"Auto Flattening")," out of the box with the concept of ",(0,o.kt)("a",{parentName:"p",href:"../fundamentals/naming-convention"},"Naming Conventions"),". With that in mind, let's provide a ",(0,o.kt)("inlineCode",{parentName:"p"},"NamingConvention")," for ",(0,o.kt)("inlineCode",{parentName:"p"},"Mapping<Bio, BioDto>")," by using yet another ",(0,o.kt)("inlineCode",{parentName:"p"},"MappingConfiguration")," function: ",(0,o.kt)("inlineCode",{parentName:"p"},"namingConventions()")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"createMap(\n    mapper,\n    Bio,\n    BioDto,\n    typeConverter(Date, String, (date) => date.toDateString()),\n    // highlight-next-line\n    namingConventions(new CamelCaseNamingConvention())\n);\n")),(0,o.kt)("p",null,"Let's execute the map operation again, you'll get the complete ",(0,o.kt)("inlineCode",{parentName:"p"},"UserDto")," \ud83c\udf89"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"UserDto {\n    bio: BioDto {\n        avatarUrl: 'google.com',\n        birthday: 'Wed Mar 23 2022',\n        jobSalary: 99999,\n        jobTitle: 'Developer'\n    },\n    username: 'ctran',\n    lastName: 'Tran',\n    firstName: 'Chau',\n    fullName: 'Chau Tran'\n}\n")),(0,o.kt)("h2",{id:"summary"},"Summary"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Without AutoMapper, mapping logic is repetitive and hard to scale. DTOs and Entities are coupling."),(0,o.kt)("li",{parentName:"ul"},"With AutoMapper, matching properties are mapped ",(0,o.kt)("em",{parentName:"li"},"automatically")," (",(0,o.kt)("inlineCode",{parentName:"li"},"firstName"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"lastName"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"username"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"bio"),", and ",(0,o.kt)("inlineCode",{parentName:"li"},"bio.avatarUrl"),")"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"../fundamentals/auto-flattening"},"Auto Flattening")," with ",(0,o.kt)("a",{parentName:"li",href:"../fundamentals/naming-convention"},"Naming Conventions")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"../mapping-configuration/type-converters"},"Type Converter")," allows for using the same conversion for the same pair of types.")),(0,o.kt)(i.Z,{mdxType:"Tabs"},(0,o.kt)(l.Z,{default:!0,value:"userentity",label:"user.ts",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'export class User {\n    @AutoMap()\n    firstName: string;\n\n    @AutoMap()\n    lastName: string;\n\n    @AutoMap()\n    username: string;\n\n    password: string; // <- we purposely left this one out because we don\'t want to map "password"\n\n    @AutoMap(() => Bio)\n    bio: Bio;\n}\n\nexport class Bio {\n    @AutoMap(() => Job)\n    job: Job;\n\n    @AutoMap()\n    birthday: Date;\n\n    @AutoMap()\n    avatarUrl: string;\n}\n\nexport class Job {\n    @AutoMap()\n    title: string;\n\n    @AutoMap()\n    salary: number;\n}\n'))),(0,o.kt)(l.Z,{value:"userdto",label:"user.dto.ts",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export class UserDto {\n    @AutoMap()\n    firstName: string;\n\n    @AutoMap()\n    lastName: string;\n\n    @AutoMap()\n    fullName: string;\n\n    @AutoMap()\n    username: string;\n\n    @AutoMap(() => BioDto)\n    bio: BioDto;\n}\n\nexport class BioDto {\n    @AutoMap()\n    jobTitle: string;\n\n    @AutoMap()\n    jobSalary: number;\n\n    @AutoMap()\n    birthday: string;\n\n    @AutoMap()\n    avatarUrl: string;\n}\n"))),(0,o.kt)(l.Z,{value:"mapper",label:"mapper.ts",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { createMapper } from '@automapper/core';\nimport { classes } from '@automapper/classes';\n\n// Create and export the mapper\nexport const mapper = createMapper({\n    strategyInitializer: classes(),\n});\n"))),(0,o.kt)(l.Z,{value:"main",label:"main.ts",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"createMap(\n    mapper,\n    Bio,\n    BioDto,\n    typeConverter(Date, String, (date) => date.toDateString()),\n    namingConventions(new CamelCaseNamingConvention())\n);\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    forMember(\n        (destination) => destination.fullName,\n        mapFrom((source) => source.firstName + ' ' + source.lastName)\n    )\n);\n"))),(0,o.kt)(l.Z,{value:"test",label:"user.service.ts",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export class UserService {\n    testMapping() {\n        const user = new User();\n        user.firstName = 'Chau';\n        user.lastName = 'Tran';\n        user.username = 'ctran';\n        user.password = '123456';\n        user.bio = new Bio();\n        user.bio.avatarUrl = 'google.com';\n        user.bio.birthday = new Date();\n        user.bio.job = new Job();\n        user.bio.job.title = 'Developer';\n        user.bio.job.salary = 99999;\n\n        const dto = mapper.map(user, User, UserDto);\n    }\n}\n")))),(0,o.kt)("iframe",{src:"https://stackblitz.com/edit/typescript-1dfb3g?ctl=1&devToolsHeight=100&embed=1&file=index.ts",frameBorder:"0",width:"100%",height:"500"}))}g.isMDXComponent=!0}}]);