"use strict";(self.webpackChunkdocumentations=self.webpackChunkdocumentations||[]).push([[3922],{9613:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(9496);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},u=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=l(n),m=r,k=d["".concat(s,".").concat(m)]||d[m]||c[m]||o;return n?a.createElement(k,p(p({ref:t},u),{},{components:n})):a.createElement(k,p({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,p=new Array(o);p[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,p[1]=i;for(var l=2;l<o;l++)p[l]=n[l];return a.createElement.apply(null,p)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9537:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return c}});var a=n(5443),r=n(3010),o=(n(9496),n(9613)),p=["components"],i={id:"classes",title:"automapper/classes",sidebar_label:"automapper/classes",sidebar_position:1},s=void 0,l={unversionedId:"strategies/classes",id:"strategies/classes",title:"automapper/classes",description:"Overview",source:"@site/docs/strategies/classes.mdx",sourceDirName:"strategies",slug:"/strategies/classes",permalink:"/docs/strategies/classes",draft:!1,editUrl:"https://github.com/nartc/mapper/tree/main/packages/documentations/docs/strategies/classes.mdx",tags:[],version:"current",lastUpdatedBy:"Chau Tran",lastUpdatedAt:1648507459,formattedLastUpdatedAt:"3/28/2022",sidebarPosition:1,frontMatter:{id:"classes",title:"automapper/classes",sidebar_label:"automapper/classes",sidebar_position:1},sidebar:"docs",previous:{title:"TypeConverters",permalink:"/docs/mapping-configuration/type-converters"},next:{title:"automapper/pojos",permalink:"/docs/strategies/pojos"}},u={},c=[{value:"Overview",id:"overview",level:2},{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Metadata",id:"metadata",level:2},{value:"<code>AutoMap</code>",id:"automap",level:3},{value:"Enum",id:"enum",level:4},{value:"Array type",id:"array-type",level:4},{value:"Circular Dependency",id:"circular-dependency",level:4},{value:"Transformer Plugin",id:"transformer-plugin",level:3},{value:"Mapped Types",id:"mapped-types",level:3}],d={toc:c};function m(e){var t=e.components,n=(0,r.Z)(e,p);return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@automapper/classes")," is an official strategy that works with ES6/TS Class-based projects. It is recommended to use with ",(0,o.kt)("a",{parentName:"p",href:"https://nestjs.com"},"NestJS")," backend as NestJS works very well with Classes."),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"npm i @automapper/core @automapper/classes\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"yarn add @automapper/core @automapper/classes\n")),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"We have been using ",(0,o.kt)("inlineCode",{parentName:"p"},"@automapper/classes")," throughout the documentation. Check ",(0,o.kt)("a",{parentName:"p",href:"../tutorial/preface"},"Tutorial")," for more information about usage."),(0,o.kt)("h2",{id:"metadata"},"Metadata"),(0,o.kt)("h3",{id:"automap"},(0,o.kt)("inlineCode",{parentName:"h3"},"AutoMap")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"AutoMap")," is a ",(0,o.kt)("inlineCode",{parentName:"p"},"PropertyDecorator")," to track a property's metadata on a class. ",(0,o.kt)("inlineCode",{parentName:"p"},"@AutoMap()")," has 3 overloads:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"@AutoMap()"),": Use on primitives like ",(0,o.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"number"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"boolean"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"Date")," is also acceptable.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"@AutoMap(() => Type | [Type])"),": Supply a ",(0,o.kt)("inlineCode",{parentName:"p"},"Type")," so ",(0,o.kt)("inlineCode",{parentName:"p"},"AutoMap")," does not have to guess (or cannot guess). Use on nested models, enums, array types, complex union types, or ambiguous types (e.g: ",(0,o.kt)("inlineCode",{parentName:"p"},"any"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Record"),")")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"@AutoMap(AutoMapOptions)"),": Take complete control of the data that ",(0,o.kt)("inlineCode",{parentName:"p"},"AutoMap")," stores"))),(0,o.kt)("h4",{id:"enum"},"Enum"),(0,o.kt)("p",null,"In TypeScript, there are 2 main types of Enums that we can have: String and Numeric. In order for AutoMapper to work correctly with Enums, we need to supply the type of our enums with ",(0,o.kt)("inlineCode",{parentName:"p"},"AutoMap()")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"enum Color {\n    Red,\n    Green,\n    Blue,\n}\n\nenum Role {\n    Admin = 'admin',\n    User = 'user',\n}\n\nclass User {\n    @AutoMap(() => String) // string enum\n    role!: Role;\n    @AutoMap(() => Number) // numeric enum\n    color!: Color;\n}\n")),(0,o.kt)("h4",{id:"array-type"},"Array type"),(0,o.kt)("p",null,"As mentioned above, we need to explicitly supply a type to ",(0,o.kt)("inlineCode",{parentName:"p"},"AutoMap")," if the property has an Array type"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"class User {\n    @AutoMap(() => [Date])\n    logins!: Date[];\n}\n")),(0,o.kt)("h4",{id:"circular-dependency"},"Circular Dependency"),(0,o.kt)("p",null,"It is common to have circular dependency in terms of models when we work with an ORM. By default, AutoMapper sets a ",(0,o.kt)("inlineCode",{parentName:"p"},"depth")," value of ",(0,o.kt)("inlineCode",{parentName:"p"},"1")," for nested models."),(0,o.kt)("p",null,"In other words, let's assume we have a circular dependency: ",(0,o.kt)("inlineCode",{parentName:"p"},"A <-> B")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"class A {\n    b: B;\n}\n\nclass B {\n    a: A;\n}\n\n// depth 1\nA {\n    b: B {\n        a: A {\n            b: undefined\n        }\n    }\n}\n\n// depth 2\nA {\n    b: B {\n        a: A {\n            b: B {\n                a: undefined\n            }\n        }\n    }\n}\n")),(0,o.kt)("p",null,"We can configure the ",(0,o.kt)("inlineCode",{parentName:"p"},"depth")," by using the ",(0,o.kt)("inlineCode",{parentName:"p"},"AutoMapOptions")," with ",(0,o.kt)("inlineCode",{parentName:"p"},"AutoMap")),(0,o.kt)("h3",{id:"transformer-plugin"},"Transformer Plugin"),(0,o.kt)("p",null,"This section is meant to be a placeholder because ",(0,o.kt)("inlineCode",{parentName:"p"},"Transformer Plugin")," is related to ",(0,o.kt)("inlineCode",{parentName:"p"},"@automapper/classes"),". Please check the dedicated ",(0,o.kt)("a",{parentName:"p",href:"../misc/transformer-plugin"},"TransformerPlugin")),(0,o.kt)("h3",{id:"mapped-types"},"Mapped Types"),(0,o.kt)("p",null,"This section is meant to be a placeholder because ",(0,o.kt)("inlineCode",{parentName:"p"},"Mapped Types")," is related to ",(0,o.kt)("inlineCode",{parentName:"p"},"@automapper/classes"),". Please check the dedicated ",(0,o.kt)("a",{parentName:"p",href:"../misc/mapped-types"},"MappedTypes")))}m.isMDXComponent=!0}}]);