"use strict";(self.webpackChunkdocumentations=self.webpackChunkdocumentations||[]).push([[2536],{9613:function(n,e,t){t.d(e,{Zo:function(){return c},kt:function(){return d}});var o=t(9496);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function i(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,o)}return t}function r(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?i(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function s(n,e){if(null==n)return{};var t,o,a=function(n,e){if(null==n)return{};var t,o,a={},i=Object.keys(n);for(o=0;o<i.length;o++)t=i[o],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(o=0;o<i.length;o++)t=i[o],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var l=o.createContext({}),p=function(n){var e=o.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):r(r({},e),n)),t},c=function(n){var e=p(n.components);return o.createElement(l.Provider,{value:e},n.children)},m={inlineCode:"code",wrapper:function(n){var e=n.children;return o.createElement(o.Fragment,{},e)}},u=o.forwardRef((function(n,e){var t=n.components,a=n.mdxType,i=n.originalType,l=n.parentName,c=s(n,["components","mdxType","originalType","parentName"]),u=p(t),d=a,f=u["".concat(l,".").concat(d)]||u[d]||m[d]||i;return t?o.createElement(f,r(r({ref:e},c),{},{components:t})):o.createElement(f,r({ref:e},c))}));function d(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var i=t.length,r=new Array(i);r[0]=u;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=n,s.mdxType="string"==typeof n?n:a,r[1]=s;for(var p=2;p<i;p++)r[p]=t[p];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},4046:function(n,e,t){t.r(e),t.d(e,{assets:function(){return c},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return m}});var o=t(5443),a=t(3010),i=(t(9496),t(9613)),r=["components"],s={id:"naming-convention",title:"Naming Conventions",sidebar_label:"Naming Conventions",sidebar_position:3},l=void 0,p={unversionedId:"fundamentals/naming-convention",id:"fundamentals/naming-convention",title:"Naming Conventions",description:"NamingConvention allows AutoMapper to map models with different casing convention in terms of properties' names. Out of the box, AutoMapper provides 3 conventions:",source:"@site/docs/fundamentals/naming-convention.mdx",sourceDirName:"fundamentals",slug:"/fundamentals/naming-convention",permalink:"/docs/fundamentals/naming-convention",draft:!1,editUrl:"https://github.com/nartc/mapper/tree/main/packages/documentations/docs/fundamentals/naming-convention.mdx",tags:[],version:"current",lastUpdatedBy:"Chau Tran",lastUpdatedAt:1648359081,formattedLastUpdatedAt:"3/27/2022",sidebarPosition:3,frontMatter:{id:"naming-convention",title:"Naming Conventions",sidebar_label:"Naming Conventions",sidebar_position:3},sidebar:"docs",previous:{title:"Mapping",permalink:"/docs/fundamentals/mapping"},next:{title:"Auto Flattening",permalink:"/docs/fundamentals/auto-flattening"}},c={},m=[{value:"Different conventions for <code>Source</code> and <code>Destination</code>",id:"different-conventions-for-source-and-destination",level:3}],u={toc:m};function d(n){var e=n.components,t=(0,a.Z)(n,r);return(0,i.kt)("wrapper",(0,o.Z)({},u,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"NamingConvention")," allows AutoMapper to map models with different casing convention in terms of properties' names. Out of the box, AutoMapper provides 3 conventions:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"CamelCaseNamingConvention")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"PascalCaseNamingConvention")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"SnakeCaseNamingConvention"))),(0,i.kt)("p",null,"By default, AutoMapper does not set a default convention. ",(0,i.kt)("a",{parentName:"p",href:"./auto-flattening"},"Auto Flattening")," can only be applied when ",(0,i.kt)("inlineCode",{parentName:"p"},"NamingConvention")," is set on the models, even if they share the same casing."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// Mapper level conventions (global for all Mappings)\nconst mapper = createMapper({\n    strategyInitializer: classes(),\n    namingConventions: new CamelCaseNamingConvention(),\n});\n\n// Mapping level conventions (applied for one specific Mapping)\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    namingConventions(new CamelCaseNamingConvention())\n);\n\n// Profile level conventions (applied for ALL Mappings inside a Profile)\naddProfile(\n    mapper,\n    userProfile,\n    namingConventions(new CamelCaseNamingConvention())\n);\n")),(0,i.kt)("h3",{id:"different-conventions-for-source-and-destination"},"Different conventions for ",(0,i.kt)("inlineCode",{parentName:"h3"},"Source")," and ",(0,i.kt)("inlineCode",{parentName:"h3"},"Destination")),(0,i.kt)("p",null,"All variants of ",(0,i.kt)("inlineCode",{parentName:"p"},"namingConventions")," also accept an object type ",(0,i.kt)("inlineCode",{parentName:"p"},"{ source: NamingConvention, destination: NamingConvention }")," to set different conventions on different models."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const mapper = createMapper({\n    strategyInitializer: classes(),\n    namingConventions: {\n        source: new PascalCaseNamingConvention(),\n        destination: new CamelCaseNamingConvention(),\n    },\n});\n")))}d.isMDXComponent=!0}}]);