"use strict";(self.webpackChunkdocumentations=self.webpackChunkdocumentations||[]).push([[4988],{9613:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return d}});var a=r(9496);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),l=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),m=l(r),d=n,f=m["".concat(s,".").concat(d)]||m[d]||c[d]||o;return r?a.createElement(f,i(i({ref:t},u),{},{components:r})):a.createElement(f,i({ref:t},u))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=m;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:n,i[1]=p;for(var l=2;l<o;l++)i[l]=r[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},5722:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return p},metadata:function(){return l},toc:function(){return c}});var a=r(5443),n=r(3010),o=(r(9496),r(9613)),i=["components"],p={id:"mikro",title:"automapper/mikro",sidebar_label:"automapper/mikro",sidebar_position:3},s=void 0,l={unversionedId:"strategies/mikro",id:"strategies/mikro",title:"automapper/mikro",description:"Overview",source:"@site/docs/strategies/mikro.mdx",sourceDirName:"strategies",slug:"/strategies/mikro",permalink:"/docs/strategies/mikro",draft:!1,editUrl:"https://github.com/nartc/mapper/tree/main/packages/documentations/docs/strategies/mikro.mdx",tags:[],version:"current",lastUpdatedBy:"Chau Tran",lastUpdatedAt:1648507459,formattedLastUpdatedAt:"3/28/2022",sidebarPosition:3,frontMatter:{id:"mikro",title:"automapper/mikro",sidebar_label:"automapper/mikro",sidebar_position:3},sidebar:"docs",previous:{title:"automapper/pojos",permalink:"/docs/strategies/pojos"},next:{title:"automapper/sequelize",permalink:"/docs/strategies/sequelize"}},u={},c=[{value:"Overview",id:"overview",level:2},{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"<code>preMap</code>",id:"premap",level:3},{value:"Metadata",id:"metadata",level:2}],m={toc:c};function d(e){var t=e.components,r=(0,n.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@automapper/mikro")," is an official strategy that works with ",(0,o.kt)("a",{parentName:"p",href:"https://mikro-orm.io/"},"MikroORM"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"@automapper/mikro")," is an extension of ",(0,o.kt)("inlineCode",{parentName:"p"},"@automapper/classes")),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"npm i @automapper/core @automapper/classes @automapper/mikro\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"yarn add @automapper/core @automapper/classes @automapper/mikro\n")),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"Using ",(0,o.kt)("inlineCode",{parentName:"p"},"@automapper/mikro")," isn't different from using ",(0,o.kt)("a",{parentName:"p",href:"./classes#usage"},(0,o.kt)("inlineCode",{parentName:"a"},"@automapper/classes")),". The difference is ",(0,o.kt)("inlineCode",{parentName:"p"},"@automapper/mikro")," has a custom ",(0,o.kt)("inlineCode",{parentName:"p"},"preMap")," that handles how to serialize the ",(0,o.kt)("inlineCode",{parentName:"p"},"sourceObject")," because of how MikroORM returns the object upon a Retrieve operation."),(0,o.kt)("h3",{id:"premap"},(0,o.kt)("inlineCode",{parentName:"h3"},"preMap")),(0,o.kt)("p",null,"The default ",(0,o.kt)("inlineCode",{parentName:"p"},"preMap")," from ",(0,o.kt)("inlineCode",{parentName:"p"},"@automapper/mikro")," checks for Collection, Reference, and Entity recursively to serialize the ",(0,o.kt)("inlineCode",{parentName:"p"},"sourceObject")," to their raw JSON data."),(0,o.kt)("p",null,"We can customize this ",(0,o.kt)("inlineCode",{parentName:"p"},"preMap")," via ",(0,o.kt)("inlineCode",{parentName:"p"},"MappingStrategyInitializerOptions")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const mapper = createMapper({\n    strategyInitializer: mikro({ preMap: customPreMap }),\n});\n")),(0,o.kt)("h2",{id:"metadata"},"Metadata"),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"./classes#metadata"},"@automapper/classes")))}d.isMDXComponent=!0}}]);