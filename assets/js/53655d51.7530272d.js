"use strict";(self.webpackChunkdocumentations=self.webpackChunkdocumentations||[]).push([[2942],{9613:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return d}});var a=t(9496);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),s=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=s(e.components);return a.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=s(t),d=i,f=u["".concat(l,".").concat(d)]||u[d]||m[d]||o;return t?a.createElement(f,r(r({ref:n},c),{},{components:t})):a.createElement(f,r({ref:n},c))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=u;var p={};for(var l in n)hasOwnProperty.call(n,l)&&(p[l]=n[l]);p.originalType=e,p.mdxType="string"==typeof e?e:i,r[1]=p;for(var s=2;s<o;s++)r[s]=t[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},8566:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return p},metadata:function(){return s},toc:function(){return m}});var a=t(5443),i=t(3010),o=(t(9496),t(9613)),r=["components"],p={id:"mapping-profile",title:"Group Mapping Logic with Profile",sidebar_label:"Group Mapping Logic with Profile",sidebar_position:5},l=void 0,s={unversionedId:"tutorial/mapping-profile",id:"tutorial/mapping-profile",title:"Group Mapping Logic with Profile",description:"In the previous section, you've created your first Mappings for Bio  BioDto and User  UserDto",source:"@site/docs/tutorial/mapping-profile.mdx",sourceDirName:"tutorial",slug:"/tutorial/mapping-profile",permalink:"/docs/tutorial/mapping-profile",draft:!1,editUrl:"https://github.com/nartc/mapper/tree/main/packages/documentations/docs/tutorial/mapping-profile.mdx",tags:[],version:"current",lastUpdatedBy:"Chau Tran",lastUpdatedAt:1648269750,formattedLastUpdatedAt:"3/26/2022",sidebarPosition:5,frontMatter:{id:"mapping-profile",title:"Group Mapping Logic with Profile",sidebar_label:"Group Mapping Logic with Profile",sidebar_position:5},sidebar:"docs",previous:{title:"Use Mapping Configurations",permalink:"/docs/tutorial/mapping-configurations"},next:{title:"Mapper",permalink:"/docs/fundamentals/mapper"}},c={},m=[{value:"Your first <code>MappingProfile</code>",id:"your-first-mappingprofile",level:2},{value:"Share <code>MappingConfiguration</code>",id:"share-mappingconfiguration",level:2}],u={toc:m};function d(e){var n=e.components,t=(0,i.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"In the previous section, you've created your first Mappings for ",(0,o.kt)("inlineCode",{parentName:"p"},"Bio <-> BioDto")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"User <-> UserDto")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"createMap(\n    mapper,\n    Bio,\n    BioDto,\n    typeConverter(Date, String, (date) => date.toDateString()),\n    namingConventions(new CamelCaseNamingConvention())\n);\n\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    forMember(\n        (destination) => destination.fullName,\n        mapFrom((source) => source.firstName + ' ' + source.lastName)\n    )\n);\n")),(0,o.kt)("p",null,"This approach works completely fine but when the application starts growing with more entities, these configurations will also start growing. ",(0,o.kt)("inlineCode",{parentName:"p"},"Profile")," is a way to group Mappings of related entities into a ",(0,o.kt)("inlineCode",{parentName:"p"},"MappingProfile"),", so you can focus on a specific domain when working with a certain set of entities."),(0,o.kt)("h2",{id:"your-first-mappingprofile"},"Your first ",(0,o.kt)("inlineCode",{parentName:"h2"},"MappingProfile")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"MappingProfile")," is a function that will be called with the ",(0,o.kt)("inlineCode",{parentName:"p"},"Mapper")," and returns ",(0,o.kt)("inlineCode",{parentName:"p"},"void"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const bioProfile: MappingProfile = (mapper) => {\n    createMap(\n        mapper,\n        Bio,\n        BioDto,\n        typeConverter(Date, String, (date) => date.toDateString()),\n        namingConventions(new CamelCaseNamingConvention())\n    );\n};\n")),(0,o.kt)("p",null,"When you have more models/DTOs related to ",(0,o.kt)("inlineCode",{parentName:"p"},"Bio"),", you can group them all under ",(0,o.kt)("inlineCode",{parentName:"p"},"bioProfile"),". Repeat the process with ",(0,o.kt)("inlineCode",{parentName:"p"},"User <-> UserDto"),"."),(0,o.kt)("p",null,"To use ",(0,o.kt)("inlineCode",{parentName:"p"},"MappingProfile"),", call ",(0,o.kt)("inlineCode",{parentName:"p"},"addProfile()")," with your ",(0,o.kt)("inlineCode",{parentName:"p"},"Mapper")," object and the ",(0,o.kt)("inlineCode",{parentName:"p"},"MappingProfile")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"addProfile(mapper, bioProfile);\naddProfile(mapper, userProfile);\n")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Order of the ",(0,o.kt)("inlineCode",{parentName:"p"},"MappingProfile")," matters. ",(0,o.kt)("inlineCode",{parentName:"p"},"bioProfile")," goes first because ",(0,o.kt)("inlineCode",{parentName:"p"},"userProfile")," depends on ",(0,o.kt)("inlineCode",{parentName:"p"},"Mapping<Bio, BioDto>")))),(0,o.kt)("h2",{id:"share-mappingconfiguration"},"Share ",(0,o.kt)("inlineCode",{parentName:"h2"},"MappingConfiguration")),(0,o.kt)("p",null,"One benefit of using ",(0,o.kt)("inlineCode",{parentName:"p"},"MappingProfile")," is that you can share some common ",(0,o.kt)("inlineCode",{parentName:"p"},"MappingConfiguration")," for ",(0,o.kt)("strong",{parentName:"p"},"all")," ",(0,o.kt)("inlineCode",{parentName:"p"},"createMap()")," inside of a specific ",(0,o.kt)("inlineCode",{parentName:"p"},"MappingProfile"),"."),(0,o.kt)("p",null,"Let's assume you have the following Mappings"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const bioProfile: MappingProfile = (mapper) => {\n    const camelCaseNamingConvention = new CamelCaseNamingConvention();\n    createMap(\n        mapper,\n        Bio,\n        BioDto,\n        namingConventions(camelCaseNamingConvention),\n        extend(Base, BaseDto)\n    );\n\n    createMap(\n        mapper,\n        Bio,\n        BioInformationDto,\n        namingConventions(camelCaseNamingConvention),\n        extend(Base, BaseDto)\n    );\n\n    createMap(\n        mapper,\n        Bio,\n        MinimalBioDto,\n        namingConventions(camelCaseNamingConvention),\n        extend(Base, BaseDto)\n    );\n};\n")),(0,o.kt)("p",null,"Instead of repeating the same ",(0,o.kt)("inlineCode",{parentName:"p"},"MappingConfiguration")," on each ",(0,o.kt)("inlineCode",{parentName:"p"},"createMap()")," like above, you can pass the ",(0,o.kt)("inlineCode",{parentName:"p"},"MappingConfiguration")," in ",(0,o.kt)("inlineCode",{parentName:"p"},"addProfile()")," instead"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const bioProfile: MappingProfile = (mapper) => {\n    createMap(mapper, Bio, BioDto);\n    createMap(mapper, Bio, BioInformationDto);\n    createMap(mapper, Bio, MinimalBioDto);\n};\n\naddProfile(\n    mapper,\n    bioProfile,\n    namingConventions(new CamelCaseNamingConvention()),\n    extend(Base, BaseDto)\n);\n")))}d.isMDXComponent=!0}}]);