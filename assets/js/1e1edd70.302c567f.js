"use strict";(self.webpackChunkdocumentations=self.webpackChunkdocumentations||[]).push([[4028],{9613:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return d}});var r=n(9496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var m=r.createContext({}),u=function(e){var t=r.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(m.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,m=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),c=u(n),d=a,f=c["".concat(m,".").concat(d)]||c[d]||l[d]||o;return n?r.createElement(f,i(i({ref:t},s),{},{components:n})):r.createElement(f,i({ref:t},s))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=c;var p={};for(var m in t)hasOwnProperty.call(t,m)&&(p[m]=t[m]);p.originalType=e,p.mdxType="string"==typeof e?e:a,i[1]=p;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},7766:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return m},default:function(){return d},frontMatter:function(){return p},metadata:function(){return u},toc:function(){return l}});var r=n(5443),a=n(3010),o=(n(9496),n(9613)),i=["components"],p={id:"map-with-arguments",title:"MapWithArguments",sidebar_label:"MapWithArguments",sidebar_position:10},m=void 0,u={unversionedId:"mapping-configuration/for-member/map-with-arguments",id:"mapping-configuration/for-member/map-with-arguments",title:"MapWithArguments",description:"Call mapWithArguments() to map the configured property with extra arguments at the time the map operation occurs (aka mapper.map())",source:"@site/docs/mapping-configuration/for-member/map-with-arguments.mdx",sourceDirName:"mapping-configuration/for-member",slug:"/mapping-configuration/for-member/map-with-arguments",permalink:"/docs/mapping-configuration/for-member/map-with-arguments",draft:!1,editUrl:"https://github.com/nartc/mapper/tree/main/packages/documentations/docs/mapping-configuration/for-member/map-with-arguments.mdx",tags:[],version:"current",lastUpdatedBy:"Chau Tran",lastUpdatedAt:1648447590,formattedLastUpdatedAt:"3/28/2022",sidebarPosition:10,frontMatter:{id:"map-with-arguments",title:"MapWithArguments",sidebar_label:"MapWithArguments",sidebar_position:10},sidebar:"docs",previous:{title:"UndefinedSubstitution",permalink:"/docs/mapping-configuration/for-member/undefined-substitution"},next:{title:"MapDefer",permalink:"/docs/mapping-configuration/for-member/map-defer"}},s={},l=[{value:"Value Selector",id:"value-selector",level:2},{value:"Value Resolver",id:"value-resolver",level:2}],c={toc:l};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Call ",(0,o.kt)("inlineCode",{parentName:"p"},"mapWithArguments()")," to map the configured property with extra arguments at the time the map operation occurs (aka ",(0,o.kt)("inlineCode",{parentName:"p"},"mapper.map()"),")"),(0,o.kt)("p",null,"All ",(0,o.kt)("inlineCode",{parentName:"p"},"map()")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"mutate()")," variants accept an optional ",(0,o.kt)("inlineCode",{parentName:"p"},"MapOptions")," that we can use to pass in ",(0,o.kt)("inlineCode",{parentName:"p"},"extraArgs")," which ",(0,o.kt)("inlineCode",{parentName:"p"},"mapWithArguments")," will have access to."),(0,o.kt)("h2",{id:"value-selector"},"Value Selector"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"mapWithArguments()")," accepts a ",(0,o.kt)("inlineCode",{parentName:"p"},"ValueSelector")," that AutoMapper will use to get the value from the ",(0,o.kt)("inlineCode",{parentName:"p"},"sourceObject")," and the ",(0,o.kt)("inlineCode",{parentName:"p"},"extraArguments")," upon mapping the configured property"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"createMap(\n    mapper,\n    User,\n    UserDto,\n    forMember(\n        (destination) => destination.fullName,\n        mapWithArguments((source, { someArgument }) => {\n            return getFullName(source, someArgument);\n        })\n    )\n);\n\nmapper.map(user, User, UserDto, { extraArgs: () => ({ someArgument: 'foo' }) });\n")),(0,o.kt)("h2",{id:"value-resolver"},"Value Resolver"),(0,o.kt)("p",null,"We can also pass in a ",(0,o.kt)("inlineCode",{parentName:"p"},"Resolver<TSource, TExtraArguments, TReturnValue>")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"mapWithArguments")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export const taxResolver: Resolver<Item, { percentage: number }, number> = {\n    resolve(source, { percentage }) {\n        return source.price * percentage;\n    },\n};\n\ncreateMap(\n    mapper,\n    Item,\n    ItemDto,\n    forMember((destination) => destination.tax, mapWithArguments(taxResolver))\n);\n\nmapper.map(item, Item, ItemDto, { extraArgs: () => ({ percentage: 0.5 }) });\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"mapWithArguments()")," sets the ",(0,o.kt)("inlineCode",{parentName:"p"},"TransformationType")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"TransformationType.MapWithArguments")))}d.isMDXComponent=!0}}]);