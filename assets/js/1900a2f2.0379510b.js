"use strict";(self.webpackChunkdocumentations=self.webpackChunkdocumentations||[]).push([[8744],{9613:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return c}});var a=n(9496);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(n),c=r,h=d["".concat(p,".").concat(c)]||d[c]||m[c]||o;return n?a.createElement(h,i(i({ref:t},u),{},{components:n})):a.createElement(h,i({ref:t},u))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9215:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return p},default:function(){return c},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return m}});var a=n(5443),r=n(3010),o=(n(9496),n(9613)),i=["components"],s={id:"overview",title:"Overview",sidebar_label:"Overview",sidebar_position:1},p=void 0,l={unversionedId:"getting-started/overview",id:"getting-started/overview",title:"Overview",description:"What is AutoMapper?",source:"@site/docs/getting-started/overview.mdx",sourceDirName:"getting-started",slug:"/getting-started/overview",permalink:"/docs/getting-started/overview",draft:!1,editUrl:"https://github.com/nartc/mapper/tree/main/packages/documentations/docs/getting-started/overview.mdx",tags:[],version:"current",lastUpdatedBy:"Chau Tran",lastUpdatedAt:1648359081,formattedLastUpdatedAt:"3/27/2022",sidebarPosition:1,frontMatter:{id:"overview",title:"Overview",sidebar_label:"Overview",sidebar_position:1},sidebar:"docs",next:{title:"Migrating to AutoMapper 8",permalink:"/docs/getting-started/migrate-to-automapper-v8"}},u={},m=[{value:"What is AutoMapper?",id:"what-is-automapper",level:2},{value:"Why use AutoMapper?",id:"why-use-automapper",level:2},{value:"Ecosystem",id:"ecosystem",level:2},{value:"Core",id:"core",level:3},{value:"Strategies",id:"strategies",level:3},{value:"NestJS",id:"nestjs",level:3}],d={toc:m};function c(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"what-is-automapper"},"What is AutoMapper?"),(0,o.kt)("p",null,"AutoMapper (TypeScript) is an object-object mapper by ",(0,o.kt)("em",{parentName:"p"},"convention"),". When two objects' models are ",(0,o.kt)("em",{parentName:"p"},"conventionally matching"),", AutoMapper can map the two objects with almost zero mapping configuration."),(0,o.kt)("h2",{id:"why-use-automapper"},"Why use AutoMapper?"),(0,o.kt)("p",null,"Writing code for mapping (especially when they are ",(0,o.kt)("em",{parentName:"p"},"conventionally matching"),") is boring; writing tests for these mappings is even more boring. With AutoMapper, you can automate these tasks and separate the logic of transforming one Object Type to another."),(0,o.kt)("p",null,"However, AutoMapper is an ",(0,o.kt)("em",{parentName:"p"},"opinionated")," tool. While mapping configuration is an essential API of AutoMapper that provides customizations, you are probably better off ",(0,o.kt)("strong",{parentName:"p"},"not")," using AutoMapper if you find your mappings are mostly ",(0,o.kt)("em",{parentName:"p"},"manual")," mapping configurations."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://jimmybogard.com/"},"Jimmy Bogard"),", the author of .NET AutoMapper, writes a ",(0,o.kt)("a",{parentName:"p",href:"https://jimmybogard.com/automappers-design-philosophy/"},"blog post")," to express his design philosophy when he worked on .NET AutoMapper. The summary is below"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"AutoMapper works because it enforces a convention. It assumes that your destination types are a subset of the source type. It assumes that everything on your destination type is meant to be mapped. It assumes that the destination member names follow the exact name of the source type. It assumes that you want to flatten complex models into simple ones. ",(0,o.kt)("br",null),(0,o.kt)("br",null),"\nAll of these assumptions come from our original use case - view models for MVC, where all of those assumptions are in line with our view model design. With AutoMapper, we could enforce our view model design philosophy. This is the true power of conventions - laying down a set of enforceable design rules that help you streamline development along the way.",(0,o.kt)("br",null),(0,o.kt)("br",null),"\nBy enforcing conventions, we let our developers focus on the value add activities, and less on the activities that provided zero or negative value, like designing bespoke view models or writing a thousand dumb unit tests.",(0,o.kt)("br",null),(0,o.kt)("br",null),"\nAnd this is why our usage of AutoMapper has stayed so steady over the years - because our design philosophy for view models hasn't changed. If you find yourself hating a tool, it's important to ask - for what problems was this tool designed to solve? And if those problems are different than yours, perhaps that tool isn't a good fit.")),(0,o.kt)("h2",{id:"ecosystem"},"Ecosystem"),(0,o.kt)("p",null,"AutoMapper comes with a ",(0,o.kt)("inlineCode",{parentName:"p"},"core")," library and many ",(0,o.kt)("strong",{parentName:"p"},"strategies")," that allow you to work with different use-case in your JS/TS projects."),(0,o.kt)("h3",{id:"core"},"Core"),(0,o.kt)("p",null,"As the name suggests, ",(0,o.kt)("inlineCode",{parentName:"p"},"@automapper/core")," deals with tracking models' metadata, setting up mapping configurations, storing Mappings, and executing the mapping operations between the models."),(0,o.kt)("h3",{id:"strategies"},"Strategies"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Strategy"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"@automapper/classes")),(0,o.kt)("td",{parentName:"tr",align:null},"Works with TS/ES6 Class")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"@automapper/pojos")),(0,o.kt)("td",{parentName:"tr",align:null},"Works with plain objects and Interface")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"@automapper/mikro")),(0,o.kt)("td",{parentName:"tr",align:null},"Works with TS/ES6 Class and ",(0,o.kt)("a",{parentName:"td",href:"https://mikro-orm.io/"},"MikroORM"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"@automapper/sequelize")),(0,o.kt)("td",{parentName:"tr",align:null},"Works with TS/ES6 Class and ",(0,o.kt)("a",{parentName:"td",href:"https://sequelize.org/"},"Sequelize"))))),(0,o.kt)("h3",{id:"nestjs"},"NestJS"),(0,o.kt)("p",null,"AutoMapper has an official integration with ",(0,o.kt)("a",{parentName:"p",href:"https://nestjs.com"},"NestJS")," framework with the ",(0,o.kt)("inlineCode",{parentName:"p"},"@automapper/nestjs")," package."))}c.isMDXComponent=!0}}]);