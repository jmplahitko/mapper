"use strict";(self.webpackChunkdocumentations=self.webpackChunkdocumentations||[]).push([[5667],{9613:function(e,t,a){a.d(t,{Zo:function(){return d},kt:function(){return u}});var n=a(9496);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),l=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},d=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),m=l(a),u=r,f=m["".concat(p,".").concat(u)]||m[u]||c[u]||o;return a?n.createElement(f,s(s({ref:t},d),{},{components:a})):n.createElement(f,s({ref:t},d))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var l=2;l<o;l++)s[l]=a[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},8160:function(e,t,a){a.r(t),a.d(t,{assets:function(){return d},contentTitle:function(){return p},default:function(){return u},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return c}});var n=a(5443),r=a(3010),o=(a(9496),a(9613)),s=["components"],i={id:"pojos",title:"automapper/pojos",sidebar_label:"automapper/pojos",sidebar_position:2},p=void 0,l={unversionedId:"strategies/pojos",id:"strategies/pojos",title:"automapper/pojos",description:"Overview",source:"@site/docs/strategies/pojos.mdx",sourceDirName:"strategies",slug:"/strategies/pojos",permalink:"/docs/strategies/pojos",draft:!1,editUrl:"https://github.com/nartc/mapper/tree/main/packages/documentations/docs/strategies/pojos.mdx",tags:[],version:"current",lastUpdatedBy:"Chau Tran",lastUpdatedAt:1648507459,formattedLastUpdatedAt:"3/28/2022",sidebarPosition:2,frontMatter:{id:"pojos",title:"automapper/pojos",sidebar_label:"automapper/pojos",sidebar_position:2},sidebar:"docs",previous:{title:"automapper/classes",permalink:"/docs/strategies/classes"},next:{title:"automapper/mikro",permalink:"/docs/strategies/mikro"}},d={},c=[{value:"Overview",id:"overview",level:2},{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Metadata",id:"metadata",level:2},{value:"<code>PojosMetadataMap.create()</code>",id:"pojosmetadatamapcreate",level:3},{value:"Nested model",id:"nested-model",level:4},{value:"Enum",id:"enum",level:4},{value:"Array type",id:"array-type",level:4},{value:"Circular Dependency",id:"circular-dependency",level:4},{value:"<code>PojosMetadataMap.reset()</code>",id:"pojosmetadatamapreset",level:3}],m={toc:c};function u(e){var t=e.components,a=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@automapper/pojos")," is an official strategy that works with TS Interface-based projects."),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"npm i @automapper/core @automapper/pojos\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"yarn add @automapper/core @automapper/pojos\n")),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"Different from ",(0,o.kt)("inlineCode",{parentName:"p"},"@automapper/classes"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"@automapper/pojos")," exports a singleton ",(0,o.kt)("inlineCode",{parentName:"p"},"PojosMetadataMap")," so we can provide the metadata for ",(0,o.kt)("inlineCode",{parentName:"p"},"pojos"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"interface User {\n    firstName: string;\n    lastName: string;\n}\n\ninterface UserDto {\n    firstName: string;\n    lastName: string;\n    fullName: string;\n}\n\nexport function createUserMetadata() {\n    PojosMetadataMap.create<User>('User', {\n        firstName: String,\n        lastName: String,\n    });\n\n    PojosMetadataMap.create<UserDto>('UserDto', {\n        firstName: String,\n        lastName: String,\n        fullName: String,\n    });\n}\n\ncreateUserMetadata();\n\nconst mapper = createMapper({ strategyInitializer: pojos() });\n\ncreateMap<User, UserDto>(\n    mapper,\n    'User', // this needs to match what we passed in PojosMetadataMap.create()\n    'UserDto', // this needs to match what we passed in PojosMetadataMap.create()\n    forMember(\n        (destination) => destination.fullName,\n        mapFrom((source) => source.firstName + ' ' + source.lastName)\n    )\n);\n\nconst dto = mapper.map<User, UserDto>(\n    { firstName: 'Chau', lastName: 'Tran' },\n    'User', // this needs to match what we passed in PojosMetadataMap.create()\n    'UserDto' // this needs to match what we passed in PojosMetadataMap.create()\n); // { firstName: 'Chau', lastName: 'Tran', fullName: 'Chau Tran'\n")),(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},(0,o.kt)("inlineCode",{parentName:"p"},"PojosMetadataMap.create()")," needs to be called before we attempt to call ",(0,o.kt)("inlineCode",{parentName:"p"},"createMap()")))),(0,o.kt)("h2",{id:"metadata"},"Metadata"),(0,o.kt)("p",null,"As seen above, ",(0,o.kt)("inlineCode",{parentName:"p"},"PojosMetadataMap")," is a way that ",(0,o.kt)("inlineCode",{parentName:"p"},"@automapper/pojos")," use to keep track of the Interface's metadata."),(0,o.kt)("h3",{id:"pojosmetadatamapcreate"},(0,o.kt)("inlineCode",{parentName:"h3"},"PojosMetadataMap.create()")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PojosMetadataMap.create()")," accepts a ",(0,o.kt)("inlineCode",{parentName:"p"},"string")," or a ",(0,o.kt)("inlineCode",{parentName:"p"},"symbol")," as the identifier and a metadata object."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"PojosMetadataMap.create<User>('User', {\n    firstName: String,\n    lastName: String,\n});\n")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Supply the type parameter ",(0,o.kt)("inlineCode",{parentName:"p"},"PojosMetadataMap.create<User>()")," will provide intellisense for the fields in the metadata object"))),(0,o.kt)("h4",{id:"nested-model"},"Nested model"),(0,o.kt)("p",null,"Nested model's metadata needs to be created before the parent model."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"interface Bio {\n    birthday: Date;\n}\n\ninterface User {\n    firstName: string;\n    lastName: string;\n    bio: Bio;\n}\n\nPojosMetadataMap.create<Bio>('Bio', {\n    birthday: Date,\n});\n\nPojosMetadataMap.create<User>('User', {\n    firstName: String,\n    lastName: String,\n    bio: 'Bio', // <-- use what we passed in PojosMetadataMap.create() for Bio\n});\n")),(0,o.kt)("h4",{id:"enum"},"Enum"),(0,o.kt)("p",null,"Same as ",(0,o.kt)("inlineCode",{parentName:"p"},"@automapper/classes"),", we still need to explicitly supply the Enum type"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"enum Role {\n    Admin = 'admin',\n    User = 'user',\n}\n\ninterface User {\n    role: Role;\n}\n\nPojosMetadataMap.create<User>('User', {\n    role: String,\n});\n")),(0,o.kt)("h4",{id:"array-type"},"Array type"),(0,o.kt)("p",null,"Same as ",(0,o.kt)("inlineCode",{parentName:"p"},"@automapper/classes"),", we still need to explicitly supply the Array type"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"interface Address {\n    street: string;\n}\n\ninterface Bio {\n    birthday: Date;\n    addresses: Address[];\n}\n\ninterface User {\n    firstName: string;\n    lastName: string;\n    bio: Bio;\n    logins: Date[];\n}\n\nPojosMetadataMap.create<Address>('Address', {\n    street: String,\n});\n\nPojosMetadataMap.create<Bio>('Bio', {\n    birthday: Date,\n    addresses: ['Address'], // <-- array of the identifier\n});\n\nPojosMetadataMap.create<User>('User', {\n    firstName: String,\n    lastName: String,\n    bio: 'Bio',\n    logins: [Date], // <-- array of the Date constructor\n});\n")),(0,o.kt)("h4",{id:"circular-dependency"},"Circular Dependency"),(0,o.kt)("p",null,"Same as ",(0,o.kt)("inlineCode",{parentName:"p"},"@automapper/classes"),", we can also have circular dependency with Interfaces."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"PojosMetadataMap.create<Bio>('Bio', {\n    birthday: Date,\n    addresses: ['Address'],\n});\n\nPojosMetadataMap.create<User>('User', {\n    firstName: String,\n    lastName: String,\n    bio: {\n        // pass in an object instead\n        type: () => 'Bio',\n        depth: 2, // default to 1\n    },\n    logins: [Date],\n});\n")),(0,o.kt)("h3",{id:"pojosmetadatamapreset"},(0,o.kt)("inlineCode",{parentName:"h3"},"PojosMetadataMap.reset()")),(0,o.kt)("p",null,"To clear all the metadata, we can call ",(0,o.kt)("inlineCode",{parentName:"p"},"PojosMetadataMap.reset()"),". This is useful in testing environment where we want to start fresh for each test suite."))}u.isMDXComponent=!0}}]);