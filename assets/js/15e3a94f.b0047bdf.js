"use strict";(self.webpackChunkdocumentations=self.webpackChunkdocumentations||[]).push([[2409],{9613:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(9496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),m=s(n),d=a,y=m["".concat(l,".").concat(d)]||m[d]||c[d]||o;return n?r.createElement(y,i(i({ref:t},u),{},{components:n})):r.createElement(y,i({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:a,i[1]=p;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1140:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return p},metadata:function(){return s},toc:function(){return c}});var r=n(5443),a=n(3010),o=(n(9496),n(9613)),i=["components"],p={id:"type-converters",title:"TypeConverters",sidebar_label:"TypeConverters",sidebar_position:9},l=void 0,s={unversionedId:"mapping-configuration/type-converters",id:"mapping-configuration/type-converters",title:"TypeConverters",description:"What is Type Converter?",source:"@site/docs/mapping-configuration/type-converters.mdx",sourceDirName:"mapping-configuration",slug:"/mapping-configuration/type-converters",permalink:"/docs/mapping-configuration/type-converters",draft:!1,editUrl:"https://github.com/nartc/mapper/tree/main/packages/documentations/docs/mapping-configuration/type-converters.mdx",tags:[],version:"current",lastUpdatedBy:"Chau Tran",lastUpdatedAt:1651631877,formattedLastUpdatedAt:"5/4/2022",sidebarPosition:9,frontMatter:{id:"type-converters",title:"TypeConverters",sidebar_label:"TypeConverters",sidebar_position:9},sidebar:"docs",previous:{title:"NamingConventions",permalink:"/docs/mapping-configuration/naming-conventions"},next:{title:"automapper/classes",permalink:"/docs/strategies/classes"}},u={},c=[{value:"What is Type Converter?",id:"what-is-type-converter",level:2},{value:"Type of Type Converters",id:"type-of-type-converters",level:2}],m={toc:c};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"what-is-type-converter"},"What is Type Converter?"),(0,o.kt)("p",null,"Sometimes, we would want to take complete control over the conversion of one data type to another. Suppose we have the following model:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export class Source {\n    @AutoMap()\n    value1!: string;\n    @AutoMap()\n    value2!: string;\n    @AutoMap()\n    value3!: string;\n}\n")),(0,o.kt)("p",null,"and we would like to map it to:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export class Destination {\n    @AutoMap()\n    value1!: number;\n    @AutoMap()\n    value2!: Date;\n    @AutoMap()\n    value3!: boolean;\n}\n")),(0,o.kt)("p",null,"If we were to try and map ",(0,o.kt)("inlineCode",{parentName:"p"},"Source")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"Destination")," as-is, we would end up with mismatch values and types on the ",(0,o.kt)("inlineCode",{parentName:"p"},"Destination"),". For example, ",(0,o.kt)("inlineCode",{parentName:"p"},"Source.value1")," will be mapped to ",(0,o.kt)("inlineCode",{parentName:"p"},"Destination.value1")," even though the types of each ",(0,o.kt)("inlineCode",{parentName:"p"},"value1")," are different. Instead of throwing an error, AutoMapper will map as-is to respect the dynamic nature of JavaScript. To control the conversions for these types when the properties are ",(0,o.kt)("em",{parentName:"p"},"matching"),", we need to supply Type Converters to a specific Mapping"),(0,o.kt)("p",null,"Call ",(0,o.kt)("inlineCode",{parentName:"p"},"typeConverter()")," in a ",(0,o.kt)("inlineCode",{parentName:"p"},"createMap()")," to supply a Type Converter to the Mapping"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"createMap(\n    mapper,\n    Source,\n    Destination,\n    typeConverter(String, Date, (str) => new Date(str)),\n    typeConverter(String, Number, (str) => parseInt(str, 10)),\n    typeConverter(String, Boolean, (str) => Boolean(str))\n);\n")),(0,o.kt)("p",null,"Here, we're telling AutoMapper:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If you are mapping from a ",(0,o.kt)("inlineCode",{parentName:"li"},"String")," to a ",(0,o.kt)("inlineCode",{parentName:"li"},"Number"),", use ",(0,o.kt)("inlineCode",{parentName:"li"},"parseInt()")),(0,o.kt)("li",{parentName:"ul"},"If you are mapping from a ",(0,o.kt)("inlineCode",{parentName:"li"},"String")," to a ",(0,o.kt)("inlineCode",{parentName:"li"},"Date"),", use ",(0,o.kt)("inlineCode",{parentName:"li"},"new Date()")),(0,o.kt)("li",{parentName:"ul"},"If you are mapping from a ",(0,o.kt)("inlineCode",{parentName:"li"},"String")," to a ",(0,o.kt)("inlineCode",{parentName:"li"},"Boolean"),", use ",(0,o.kt)("inlineCode",{parentName:"li"},"Boolean()"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const source = new Source();\nsource.value1 = '123';\nsource.value2 = '10/14/1991';\nsource.value3 = 'truthy';\n\nconst destination = mapper.map(source, Destination, Source);\n/**\n * Destination {\n    value1: 123, // number\n    value2: Mon Oct 14 1991 00:00:00 GMT-0500 (Central Daylight Time), // a Date instance\n    value3; true // boolean\n * }\n */\n")),(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Properties (on the Destination) that are subject to Type Converters will be treated as-is in the mapping pipeline. In other words, they will be mapped like a primitive and will ",(0,o.kt)("strong",{parentName:"p"},"NOT")," go through any automatic nested mapping even if the properties' types are ",(0,o.kt)("strong",{parentName:"p"},"Object")," types."))),(0,o.kt)("h2",{id:"type-of-type-converters"},"Type of Type Converters"),(0,o.kt)("p",null,"There are 4 types of Type Converters:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Type -> Type"),": This is what we've just used above. A single Type to another single Type"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Type -> [Type]"),": AutoMapper can also set up Type Converter from a single Type to an Array Type."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"[Type] -> Type"),": The opposite is also true"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"[Type] -> [Type]"),": Last but not least, AutoMapper can set up Type Converter between two Array Types.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// a more complex example\ncreateMap(\n    mapper,\n    TypeConverter,\n    TypeConverterDto,\n    typeConverter(String, Number, (str) => parseInt(str) + 1),\n    typeConverter(String, Boolean, (str) => Boolean(str)),\n    typeConverter(String, Date, (str) => new Date(str)),\n    typeConverter([String], [Number], (manyStrs) =>\n        manyStrs.map((str) => parseInt(str))\n    ),\n    typeConverter(DateString, String, (dateStr) => dateStr.toDateString()),\n    typeConverter(TimestampString, String, (timestampStr) =>\n        timestampStr.toISOString()\n    )\n);\n")))}d.isMDXComponent=!0}}]);