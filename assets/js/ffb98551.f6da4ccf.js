"use strict";(self.webpackChunkdocumentations=self.webpackChunkdocumentations||[]).push([[7970],{9613:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var a=n(9496);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=s(n),d=r,f=c["".concat(l,".").concat(d)]||c[d]||m[d]||o;return n?a.createElement(f,p(p({ref:t},u),{},{components:n})):a.createElement(f,p({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,p=new Array(o);p[0]=c;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,p[1]=i;for(var s=2;s<o;s++)p[s]=n[s];return a.createElement.apply(null,p)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},6772:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return m}});var a=n(5443),r=n(3010),o=(n(9496),n(9613)),p=["components"],i={id:"nestjs",title:"Usage with NestJS",sidebar_label:"Usage with NestJS"},l=void 0,s={unversionedId:"nestjs",id:"nestjs",title:"Usage with NestJS",description:"@automapper/nestjs is the official integration for NestJS.",source:"@site/docs/nestjs.mdx",sourceDirName:".",slug:"/nestjs",permalink:"/docs/nestjs",draft:!1,editUrl:"https://github.com/nartc/mapper/tree/main/packages/documentations/docs/nestjs.mdx",tags:[],version:"current",lastUpdatedBy:"Chau Tran",lastUpdatedAt:1648507459,formattedLastUpdatedAt:"3/28/2022",frontMatter:{id:"nestjs",title:"Usage with NestJS",sidebar_label:"Usage with NestJS"},sidebar:"docs",previous:{title:"Fake Async",permalink:"/docs/misc/fake-async"}},u={},m=[{value:"Installation",id:"installation",level:2},{value:"Strategy",id:"strategy",level:3},{value:"Usage",id:"usage",level:2},{value:"Async Configuration",id:"async-configuration",level:2},{value:"<code>AutomapperProfile</code>",id:"automapperprofile",level:2},{value:"<code>mappingConfigurations</code>",id:"mappingconfigurations",level:3},{value:"<code>MapInterceptor</code>",id:"mapinterceptor",level:2},{value:"<code>MapPipe</code>",id:"mappipe",level:2}],c={toc:m};function d(e){var t=e.components,n=(0,r.Z)(e,p);return(0,o.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@automapper/nestjs")," is the official integration for ",(0,o.kt)("a",{parentName:"p",href:"https://nestjs.com"},"NestJS"),"."),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"npm i @automapper/core @automapper/nestjs\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"yarn add @automapper/core @automapper/nestjs\n")),(0,o.kt)("h3",{id:"strategy"},"Strategy"),(0,o.kt)("p",null,"Recommendation is to use ",(0,o.kt)("inlineCode",{parentName:"p"},"@automapper/classes")," in a NestJS application."),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Call ",(0,o.kt)("inlineCode",{parentName:"li"},"AutomapperModule.forRoot()")," in ",(0,o.kt)("inlineCode",{parentName:"li"},"AppModule"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// single strategy\n@Module({\n    imports: [\n        AutomapperModule.forRoot({\n            strategyInitializer: classes(),\n        }),\n    ],\n})\nexport class AppModule {}\n\n// multiple strategies\n@Module({\n    imports: [\n        AutomapperModule.forRoot(\n            [\n                {\n                    name: 'classes',\n                    strategyInitializer: classes(),\n                },\n                {\n                    name: 'pojos',\n                    strategyInitializer: pojos(),\n                },\n            ],\n            {\n                globalErrorHandler,\n                globalNamingConventions,\n            }\n        ),\n    ],\n})\nexport class AppModule {}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Use ",(0,o.kt)("inlineCode",{parentName:"li"},"@InjectMapper()")," to inject the ",(0,o.kt)("inlineCode",{parentName:"li"},"Mapper")," in NestJS's ",(0,o.kt)("inlineCode",{parentName:"li"},"Injectable")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"@InjectMapper()")," accepts an optional argument ",(0,o.kt)("inlineCode",{parentName:"li"},"name"),". This is the name of the ",(0,o.kt)("inlineCode",{parentName:"li"},"CreateMapperOptions")," passed to ",(0,o.kt)("inlineCode",{parentName:"li"},"AutomapperModule.forRoot()")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"AutomapperModule")," is a ",(0,o.kt)("inlineCode",{parentName:"li"},"Global")," module, so it is only needed to be imported once to have the ",(0,o.kt)("inlineCode",{parentName:"li"},"Mapper")," available across the application")),(0,o.kt)("h2",{id:"async-configuration"},"Async Configuration"),(0,o.kt)("p",null,"TBD: ",(0,o.kt)("inlineCode",{parentName:"p"},"AutomapperModule.forRootAsync()")),(0,o.kt)("h2",{id:"automapperprofile"},(0,o.kt)("inlineCode",{parentName:"h2"},"AutomapperProfile")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"AutomapperProfile")," is an ",(0,o.kt)("inlineCode",{parentName:"p"},"Injectable")," in NestJS. Make sure to ",(0,o.kt)("inlineCode",{parentName:"p"},"extends AutomapperProfile")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { AutomapperProfile } from '@automapper/nestjs';\nimport type { Mapper } from '@automapper/core';\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class UserProfile extends AutomapperProfile {\n    constructor(@InjectMapper() mapper: Mapper) {\n        super(mapper);\n    }\n\n    override get profile() {\n        return (mapper) => {\n            createMap(mapper, User, UserDto);\n        };\n    }\n}\n")),(0,o.kt)("p",null,"Then provide ",(0,o.kt)("inlineCode",{parentName:"p"},"UserProfile")," in a ",(0,o.kt)("inlineCode",{parentName:"p"},"Module")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"@Module({\n    providers: [UserProfile],\n})\nexport class UserModule {}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"AutomapperProfile")," enforces the sub-classes to implement a ",(0,o.kt)("inlineCode",{parentName:"li"},"get profile()")," method that returns a ",(0,o.kt)("inlineCode",{parentName:"li"},"MappingProfile"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"AutomapperProfile")," can have other Services injected to its constructor if needed.")),(0,o.kt)("h3",{id:"mappingconfigurations"},(0,o.kt)("inlineCode",{parentName:"h3"},"mappingConfigurations")),(0,o.kt)("p",null,"Same concept as ",(0,o.kt)("a",{parentName:"p",href:"./tutorial/mapping-profile#share-mappingconfiguration"},"Share Configuration using MappingProfile"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"AutomapperProfile")," has an optional ",(0,o.kt)("inlineCode",{parentName:"p"},"protected get mappingConfigurations()")," that subclasses can override to provide an array of ",(0,o.kt)("inlineCode",{parentName:"p"},"MappingConfiguration"),". These configurations are passed to all ",(0,o.kt)("inlineCode",{parentName:"p"},"createMap()")," in ",(0,o.kt)("inlineCode",{parentName:"p"},"get profile()")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"@Injectable()\nexport class UserProfile extends AutomapperProfile {\n    constructor(@InjectMapper() mapper: Mapper) {\n        super(mapper);\n    }\n\n    get profile(): MappingProfile {\n        return (mapper) => {\n            createMap(mapper, UserEntity, UserDto);\n            createMap(mapper, UserEntity, UserInformationDto);\n            createMap(mapper, UserEntity, AuthUserDto);\n        };\n    }\n\n    protected get mappingConfigurations(): MappingConfiguration[] {\n        // the 3 createMap() above will get this `extend()`\n        return [extend(BaseEntity, BaseDto)];\n    }\n}\n")),(0,o.kt)("h2",{id:"mapinterceptor"},(0,o.kt)("inlineCode",{parentName:"h2"},"MapInterceptor")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@automapper/nestjs")," provides ",(0,o.kt)("inlineCode",{parentName:"p"},"MapInterceptor"),". In cases where you do not care about annotating the correct return type for a ",(0,o.kt)("strong",{parentName:"p"},"Controller#method")," and want your ",(0,o.kt)("strong",{parentName:"p"},"Service")," to be a little cleaner, you can utilize the ",(0,o.kt)("inlineCode",{parentName:"p"},"MapInterceptor")," to execute the mapping."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { MapInterceptor } from '@automapper/nestjs';\n\nexport class UserController {\n    @Get('me')\n    @UseInterceptors(MapInterceptor(User, UserDto))\n    me() {\n        // userService.getMe() returns a User here and does not have mapping logic in it.\n        return this.userService.getMe();\n    }\n}\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"MapInterceptor")," has the following signature:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"MapInterceptor(sourceModelType, destinationModelType, {\n  isArray?: boolean;\n  mapperName?: string;\n} & MapOptions)\n")),(0,o.kt)("h2",{id:"mappipe"},(0,o.kt)("inlineCode",{parentName:"h2"},"MapPipe")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@automapper/nestjs")," provides ",(0,o.kt)("inlineCode",{parentName:"p"},"MapPipe"),". When you want to transform the incoming request body before it gets to the route handler, you can utilize ",(0,o.kt)("inlineCode",{parentName:"p"},"MapPipe")," to achieve this behavior"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"@Post('/from-body')\npostFromBody(@Body(MapPipe(User, UserDto)) user: UserDto) {\n    // from the request perspective, user coming in as an User object but will be mapped to UserDto with MapPipe\n    return user;\n}\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"MapPipe")," only works with ",(0,o.kt)("inlineCode",{parentName:"p"},"@Body")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"@Query"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"@Get('/from-query')\ngetFromQuery(@Query(MapPipe(User, UserDto)) user: UserDto) {\n    // from the request perspective, user coming in as an User object but will be mapped to UserDto with MapPipe\n    return user;\n}\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Note that when we send a request with ",(0,o.kt)("inlineCode",{parentName:"p"},"Body")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"Query"),", the data is serialized. Data-type like ",(0,o.kt)("inlineCode",{parentName:"p"},"Date")," will come in the request handler as ",(0,o.kt)("inlineCode",{parentName:"p"},"string"),". Hence, please be cautious of the mapping configuration when you use ",(0,o.kt)("inlineCode",{parentName:"p"},"MapPipe"))),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"MapPipe")," has the same signature as ",(0,o.kt)("inlineCode",{parentName:"p"},"MapInterceptor")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"MapPipe(sourceModelType, destinationModelType, {\n  isArray?: boolean;\n  mapperName?: string;\n} & MapOptions)\n")))}d.isMDXComponent=!0}}]);