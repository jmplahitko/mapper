"use strict";(self.webpackChunkdocumentations=self.webpackChunkdocumentations||[]).push([[3329],{9613:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return f}});var n=r(9496);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),m=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=m(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},s=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),s=m(r),f=o,d=s["".concat(l,".").concat(f)]||s[f]||u[f]||a;return r?n.createElement(d,i(i({ref:t},c),{},{components:r})):n.createElement(d,i({ref:t},c))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=s;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:o,i[1]=p;for(var m=2;m<a;m++)i[m]=r[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}s.displayName="MDXCreateElement"},8121:function(e,t,r){r.r(t),r.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return p},metadata:function(){return m},toc:function(){return u}});var n=r(5443),o=r(3010),a=(r(9496),r(9613)),i=["components"],p={id:"map-from",title:"MapFrom",sidebar_label:"MapFrom",sidebar_position:3},l=void 0,m={unversionedId:"mapping-configuration/for-member/map-from",id:"mapping-configuration/for-member/map-from",title:"MapFrom",description:"Call mapFrom() to select the value, from the sourceObject, to map to the property being configured",source:"@site/docs/mapping-configuration/for-member/map-from.mdx",sourceDirName:"mapping-configuration/for-member",slug:"/mapping-configuration/for-member/map-from",permalink:"/docs/mapping-configuration/for-member/map-from",draft:!1,editUrl:"https://github.com/nartc/mapper/tree/main/packages/documentations/docs/mapping-configuration/for-member/map-from.mdx",tags:[],version:"current",lastUpdatedBy:"Chau Tran",lastUpdatedAt:1648359081,formattedLastUpdatedAt:"3/27/2022",sidebarPosition:3,frontMatter:{id:"map-from",title:"MapFrom",sidebar_label:"MapFrom",sidebar_position:3},sidebar:"docs",previous:{title:"Ignore",permalink:"/docs/mapping-configuration/for-member/ignore"},next:{title:"Condition",permalink:"/docs/mapping-configuration/for-member/condition"}},c={},u=[{value:"Value Selector",id:"value-selector",level:2},{value:"Value Resolver",id:"value-resolver",level:2}],s={toc:u};function f(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Call ",(0,a.kt)("inlineCode",{parentName:"p"},"mapFrom()")," to select the value, from the ",(0,a.kt)("inlineCode",{parentName:"p"},"sourceObject"),", to map to the property being configured"),(0,a.kt)("h2",{id:"value-selector"},"Value Selector"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"mapFrom()")," accepts a ",(0,a.kt)("inlineCode",{parentName:"p"},"ValueSelector")," that AutoMapper will use to get the value from the ",(0,a.kt)("inlineCode",{parentName:"p"},"sourceObject")," upon mapping the configured property"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"createMap(\n    mapper,\n    User,\n    UserDto,\n    forMember(\n        (d) => d.fullName,\n        mapFrom((source) => source.firstName + ' ' + source.lastName)\n    )\n);\n")),(0,a.kt)("h2",{id:"value-resolver"},"Value Resolver"),(0,a.kt)("p",null,"A slightly less common approach is to use a ",(0,a.kt)("inlineCode",{parentName:"p"},"Resolver")," with ",(0,a.kt)("inlineCode",{parentName:"p"},"mapFrom()"),". ",(0,a.kt)("inlineCode",{parentName:"p"},"Resolver")," has the following interface:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export interface Resolver<TheSource, TheDestination, TheReturnType> {\n    resolve(source: TheSource, destination?: TheDestination): TheReturnType;\n}\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Resolver#resolve()")," is called with the whole ",(0,a.kt)("inlineCode",{parentName:"p"},"sourceObject")," and the ",(0,a.kt)("inlineCode",{parentName:"p"},"destinationObject")," which allows us to handle some complex logic to arrive at the result for the configured property. We can reuse ",(0,a.kt)("inlineCode",{parentName:"p"},"Resolver")," as well as separating ",(0,a.kt)("inlineCode",{parentName:"p"},"Resolver")," in a different file to manage easier."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export const taxResolver: Resolver<Item, ItemDto, number> = {\n    resolve(item): number {\n        return item.type === 'A' ? item.price * 0.5 : item.price * 0.9;\n    },\n};\n\ncreateMap(\n    mapper,\n    Item,\n    ItemDto,\n    forMember((d) => d.tax, mapFrom(taxResolver))\n);\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"mapFrom()")," sets the ",(0,a.kt)("inlineCode",{parentName:"p"},"TransformationType")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"TransformationType.MapFrom")))}f.isMDXComponent=!0}}]);